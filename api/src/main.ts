import { firefox, Page, ElementHandle } from 'playwright';
import path from 'path';
import os from 'os';
import fs from 'fs';
import express from 'express';
import cors from 'cors';
import { Request, Response } from 'express';
import { AddressInfo } from 'net';
import crypto from 'crypto';
import axios from 'axios';

let API_PORT = 3562;
const BACKUP_PORTS = [3563, 3564, 3565, 3566, 3567];

const imageCache = new Map<string, string>();
const MAX_IMAGE_CACHE = 5000;

const geoCache = new Map<string, { lat: number; lon: number; name: string; timestamp: number }>();

function generateStableFileName(title: string, price: string, location: string): string {
  const contentKey = `${title}_${price}_${location}`;
  const contentHash = crypto.createHash('md5').update(contentKey).digest('hex').substring(0, 8);
  const titleClean = title.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9]/g, '_').substring(0, 20);
  const locationClean = location.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9]/g, '_').substring(0, 15);
  return `${titleClean}_${locationClean}_${contentHash}.png`;
}

async function findElement(page: Page, selectors: string[], description: string = '—ç–ª–µ–º–µ–Ω—Ç'): Promise<ElementHandle | null> {
  console.log(`üîç –ò—â–µ–º ${description} —Å—Ä–µ–¥–∏ ${selectors.length} —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤`);
  
  for (let i = 0; i < selectors.length; i++) {
    const selector = selectors[i];
    try {
      console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${selectors.length}: "${selector}"`);
      
      const element = await page.$(selector);
      if (element) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∏–¥–∏–º –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–µ–Ω
        const isVisible = await element.isVisible();
        const isConnected = await element.evaluate((el: HTMLElement) => el.isConnected);
        
        if (isVisible && isConnected) {
          console.log(`‚úÖ ${description} –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤: —Å–µ–ª–µ–∫—Ç–æ—Ä "${selector}"`);
          
          // –°–∫—Ä–æ–ª–ª–∏–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
          try {
            await element.scrollIntoViewIfNeeded();
            await page.waitForTimeout(100);
          } catch (scrollError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä–æ–ª–ª–∏—Ç—å –∫ —ç–ª–µ–º–µ–Ω—Ç—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º');
          }
          
          return element;
        } else {
          console.log(`‚ö†Ô∏è ${description} –Ω–∞–π–¥–µ–Ω –Ω–æ –Ω–µ –≥–æ—Ç–æ–≤: visible=${isVisible}, connected=${isConnected}`);
          continue;
        }
      }
    } catch (e) {
      console.log(`‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä "${selector}" –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${e}`);
      continue;
    }
  }
  
  console.log(`üîç ${description} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –ø—Ä–æ–±—É—é JS –ø–æ–∏—Å–∫`);
  return null;
}

async function waitForElement(page: Page, selectors: string[], timeout: number = 5000): Promise<ElementHandle | null> {
  console.log(`–ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º ${timeout}ms —Å—Ä–µ–¥–∏ ${selectors.length} —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤`);
  
  for (let i = 0; i < selectors.length; i++) {
    const selector = selectors[i];
    try {
      console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${selectors.length}: —Å–µ–ª–µ–∫—Ç–æ—Ä "${selector}"`);
      
      const element = await page.waitForSelector(selector, { 
        timeout,
        state: 'visible'
      });
      
      if (element) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–µ–Ω
        const isVisible = await element.isVisible();
        const isEnabled = await element.isEnabled();
        
        if (isVisible && isEnabled) {
          console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é: —Å–µ–ª–µ–∫—Ç–æ—Ä "${selector}"`);
          return element;
        } else {
          console.log(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –Ω–æ –Ω–µ –≥–æ—Ç–æ–≤: visible=${isVisible}, enabled=${isEnabled}`);
          continue;
        }
      }
    } catch (e) {
      console.log(`‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: "${selector}" - ${e}`);
      continue;
    }
  }
  
  console.log('üîç –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤');
  return null;
}

async function safeClick(page: Page, element: ElementHandle): Promise<boolean> {
  const errors: string[] = [];
  
  try {
    // –°–∫—Ä–æ–ª–ª–∏–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
    await element.scrollIntoViewIfNeeded();
    await page.waitForTimeout(200);
    
    // –ñ–¥–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–Ω–µ—Ç –≤–∏–¥–∏–º—ã–º –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º
    await element.waitForElementState('visible', { timeout: 3000 });
    await page.waitForTimeout(100);
    
    // –ú–µ—Ç–æ–¥ 1: –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫
    await element.click({ timeout: 3000, force: false });
    console.log('–£—Å–ø–µ—à–Ω—ã–π –∫–ª–∏–∫ –º–µ—Ç–æ–¥–æ–º 1 (–æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫)');
    return true;
  } catch (e) {
    const error = e instanceof Error ? e.message : String(e);
    errors.push(`–ú–µ—Ç–æ–¥ 1 (–æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫): ${error}`);
    
    try {
      // –ú–µ—Ç–æ–¥ 2: –ö–ª–∏–∫ —Å force
      await element.click({ timeout: 3000, force: true });
      console.log('–£—Å–ø–µ—à–Ω—ã–π –∫–ª–∏–∫ –º–µ—Ç–æ–¥–æ–º 2 (force –∫–ª–∏–∫)');
      return true;
    } catch (e2) {
      const error2 = e2 instanceof Error ? e2.message : String(e2);
      errors.push(`–ú–µ—Ç–æ–¥ 2 (force –∫–ª–∏–∫): ${error2}`);
      
      try {
        // –ú–µ—Ç–æ–¥ 3: JS –∫–ª–∏–∫
        await element.evaluate((el: HTMLElement) => el.click());
        console.log('–£—Å–ø–µ—à–Ω—ã–π –∫–ª–∏–∫ –º–µ—Ç–æ–¥–æ–º 3 (JS –∫–ª–∏–∫)');
        return true;
      } catch (e3) {
        const error3 = e3 instanceof Error ? e3.message : String(e3);
        errors.push(`–ú–µ—Ç–æ–¥ 3 (JS –∫–ª–∏–∫): ${error3}`);
        
        try {
          // –ú–µ—Ç–æ–¥ 4: –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
          const box = await element.boundingBox();
          if (box) {
            const x = box.x + box.width / 2;
            const y = box.y + box.height / 2;
            await page.mouse.click(x, y);
            console.log('–£—Å–ø–µ—à–Ω—ã–π –∫–ª–∏–∫ –º–µ—Ç–æ–¥–æ–º 4 (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)');
            return true;
          } else {
            errors.push(`–ú–µ—Ç–æ–¥ 4 (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã): –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å boundingBox`);
          }
        } catch (e4) {
          const error4 = e4 instanceof Error ? e4.message : String(e4);
          errors.push(`–ú–µ—Ç–æ–¥ 4 (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã): ${error4}`);
          
          try {
            // –ú–µ—Ç–æ–¥ 5: Dispatch —Å–æ–±—ã—Ç–∏–π
            await element.evaluate((el: HTMLElement) => {
              el.dispatchEvent(new MouseEvent('mousedown', { bubbles: true }));
              el.dispatchEvent(new MouseEvent('mouseup', { bubbles: true }));
              el.dispatchEvent(new MouseEvent('click', { bubbles: true }));
            });
            console.log('–£—Å–ø–µ—à–Ω—ã–π –∫–ª–∏–∫ –º–µ—Ç–æ–¥–æ–º 5 (dispatch —Å–æ–±—ã—Ç–∏–π)');
            return true;
          } catch (e5) {
            const error5 = e5 instanceof Error ? e5.message : String(e5);
            errors.push(`–ú–µ—Ç–æ–¥ 5 (dispatch —Å–æ–±—ã—Ç–∏–π): ${error5}`);
            
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –≤—Å–µ–º–∏ –º–µ—Ç–æ–¥–∞–º–∏');
            const errorMessage = `–û–®–ò–ë–ö–ê –ö–õ–ò–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏:\n${errors.join('\n')}`;
            console.error(errorMessage);
            throw new Error(errorMessage);
          }
        }
      }
    }
  }
  
  const errorMessage = `–û–®–ò–ë–ö–ê –ö–õ–ò–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏:\n${errors.join('\n')}`;
  console.error(errorMessage);
  throw new Error(errorMessage);
}

async function safeType(page: Page, element: ElementHandle, text: string): Promise<boolean> {
  const errors: string[] = [];
  
  try {
    // –°–∫—Ä–æ–ª–ª–∏–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É –∏ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è
    await element.scrollIntoViewIfNeeded();
    await page.waitForTimeout(200);
    await element.waitForElementState('visible', { timeout: 3000 });
    
    // –ú–µ—Ç–æ–¥ 1: –û—á–∏—Å—Ç–∫–∞ –∏ –≤–≤–æ–¥ —á–µ—Ä–µ–∑ element.fill
    await element.click({ clickCount: 3 });
    await page.waitForTimeout(100);
    await element.fill('');
    await page.waitForTimeout(100);
    await element.fill(text);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω
    const currentValue = await element.evaluate((el: HTMLInputElement) => el.value);
    if (currentValue === text) {
      console.log('–£—Å–ø–µ—à–Ω—ã–π –≤–≤–æ–¥ –º–µ—Ç–æ–¥–æ–º 1 (element.fill)');
      return true;
    } else {
      errors.push(`–ú–µ—Ç–æ–¥ 1: –¢–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: '${currentValue}' !== '${text}'`);
    }
  } catch (e) {
    const error = e instanceof Error ? e.message : String(e);
    errors.push(`–ú–µ—Ç–æ–¥ 1 (element.fill): ${error}`);
    console.log('–ú–µ—Ç–æ–¥ 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ 2');
  }
  
  try {
    // –ú–µ—Ç–æ–¥ 2: –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ Ctrl+A + Delete –∏ type
    await element.click();
    await page.waitForTimeout(100);
    await page.keyboard.press('Control+a');
    await page.keyboard.press('Delete');
    await page.waitForTimeout(100);
    await element.type(text);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const currentValue = await element.evaluate((el: HTMLInputElement) => el.value);
    if (currentValue === text) {
      console.log('–£—Å–ø–µ—à–Ω—ã–π –≤–≤–æ–¥ –º–µ—Ç–æ–¥–æ–º 2 (Ctrl+A + type)');
      return true;
    } else {
      errors.push(`–ú–µ—Ç–æ–¥ 2: –¢–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: '${currentValue}' !== '${text}'`);
    }
  } catch (e2) {
    const error2 = e2 instanceof Error ? e2.message : String(e2);
    errors.push(`–ú–µ—Ç–æ–¥ 2 (Ctrl+A + type): ${error2}`);
    console.log('–ú–µ—Ç–æ–¥ 2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ 3');
  }
  
  try {
    // –ú–µ—Ç–æ–¥ 3: –ü—Ä—è–º–æ–π JS –≤–≤–æ–¥ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
    await element.evaluate((el: HTMLInputElement, value: string) => {
      el.focus();
      el.value = '';
      el.value = value;
      el.dispatchEvent(new Event('input', { bubbles: true }));
      el.dispatchEvent(new Event('change', { bubbles: true }));
      el.dispatchEvent(new Event('blur', { bubbles: true }));
    }, text);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const currentValue = await element.evaluate((el: HTMLInputElement) => el.value);
    if (currentValue === text) {
      console.log('–£—Å–ø–µ—à–Ω—ã–π –≤–≤–æ–¥ –º–µ—Ç–æ–¥–æ–º 3 (JS —Å —Å–æ–±—ã—Ç–∏—è–º–∏)');
      return true;
    } else {
      errors.push(`–ú–µ—Ç–æ–¥ 3: –¢–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: '${currentValue}' !== '${text}'`);
    }
  } catch (e3) {
    const error3 = e3 instanceof Error ? e3.message : String(e3);
    errors.push(`–ú–µ—Ç–æ–¥ 3 (JS —Å —Å–æ–±—ã—Ç–∏—è–º–∏): ${error3}`);
    console.log('–ú–µ—Ç–æ–¥ 3 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ 4');
  }
  
  try {
    // –ú–µ—Ç–æ–¥ 4: –°–∏–º—É–ª—è—Ü–∏—è –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    await element.click();
    await page.waitForTimeout(100);
    await page.keyboard.press('Control+a');
    await page.keyboard.press('Delete');
    
    for (const char of text) {
      await page.keyboard.type(char);
      await page.waitForTimeout(50);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const currentValue = await element.evaluate((el: HTMLInputElement) => el.value);
    if (currentValue === text) {
      console.log('–£—Å–ø–µ—à–Ω—ã–π –≤–≤–æ–¥ –º–µ—Ç–æ–¥–æ–º 4 (–ø–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–π –≤–≤–æ–¥)');
      return true;
    } else {
      errors.push(`–ú–µ—Ç–æ–¥ 4: –¢–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: '${currentValue}' !== '${text}'`);
    }
  } catch (e4) {
    const error4 = e4 instanceof Error ? e4.message : String(e4);
    errors.push(`–ú–µ—Ç–æ–¥ 4 (–ø–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–π –≤–≤–æ–¥): ${error4}`);
    console.log('–ú–µ—Ç–æ–¥ 4 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
  }
  
  const errorMessage = `–û–®–ò–ë–ö–ê –í–í–û–î–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç '${text}' –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏:\n${errors.join('\n')}`;
  console.error(errorMessage);
  throw new Error(errorMessage);
}

interface AppStatus {
  logined: boolean;
  stage: string;
  active: boolean;
  downloadedImages?: number;
  yearFilterNotFound?: boolean;
  minYear?: number;
  maxYear?: number;
  restarting_soon?: boolean;
}
interface CategoryData {
  name: string;
  id: string;
  selector: string;
}
interface SearchResult {
  success: boolean;
  message?: string;
  error?: string;
}
interface MarketplaceItem {
  title: string;
  price: string;
  location: string;
  imageUrl: string;
  itemUrl: string;
  savedImagePath?: string;
  ageMinutes?: number;
}
interface ListingsResult {
  success: boolean;
  items?: MarketplaceItem[];
  error?: string;
  filteredCount?: number;
  duplicatesRemoved?: number;
}
interface PriceFilter {
  minPrice?: number;
  maxPrice?: number;
}
interface YearFilter {
  minYear?: number;
  maxYear?: number;
}
let appStatus: AppStatus = {
  logined: false,
  stage: 'initializing',
  active: false,
  downloadedImages: 0,
  yearFilterNotFound: false,
  restarting_soon: false
};
let globalPage: Page | null = null;
let globalBrowser: any = null;
let categories: CategoryData[] = [];
let apiServer: any = null;

interface AppState {
  selectedCategory?: string;
  searchQuery?: string;
  location?: string;
  radius?: number;
  minPrice?: number;
  maxPrice?: number;
  minYear?: number;
  maxYear?: number;
  maxAgeMinutes?: number;
}

let currentAppState: AppState = {};

function getRandomDelay(min: number = 100, max: number = 500): number {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function getHumanTypingDelay(): number {
  return Math.floor(Math.random() * 80) + 20;
}

async function humanMouseMove(page: Page, fromX?: number, fromY?: number, toX?: number, toY?: number) {
  try {
    const viewport = page.viewportSize();
    if (!viewport) return;
    
    const startX = fromX || Math.random() * viewport.width;
    const startY = fromY || Math.random() * viewport.height;
    const endX = toX || Math.random() * viewport.width;
    const endY = toY || Math.random() * viewport.height;
    
    const steps = Math.floor(Math.random() * 10) + 5;
    
    for (let i = 0; i <= steps; i++) {
      const x = startX + (endX - startX) * (i / steps) + (Math.random() - 0.5) * 10;
      const y = startY + (endY - startY) * (i / steps) + (Math.random() - 0.5) * 10;
      
      await page.mouse.move(x, y);
      await page.waitForTimeout(getRandomDelay(10, 30));
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏:', error);
  }
}

async function humanClick(page: Page, element: any, options: any = {}) {
  try {
    const box = await element.boundingBox();
    if (!box) {
      await element.click(options);
      return;
    }
    
    const x = box.x + box.width * (0.3 + Math.random() * 0.4);
    const y = box.y + box.height * (0.3 + Math.random() * 0.4);
    
    await humanMouseMove(page, undefined, undefined, x, y);
    await page.waitForTimeout(getRandomDelay(50, 150));
    
    await page.mouse.down();
    await page.waitForTimeout(getRandomDelay(20, 80));
    await page.mouse.up();
    
    await page.waitForTimeout(getRandomDelay(100, 300));
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∫–ª–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—é –æ–±—ã—á–Ω—ã–π:', error);
    try {
      await element.click(options);
    } catch (fallbackError) {
      const errorMsg = `–û–®–ò–ë–ö–ê –ö–õ–ò–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫ –Ω–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –º–µ—Ç–æ–¥–æ–º, –Ω–∏ –æ–±—ã—á–Ω—ã–º. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}. –û—à–∏–±–∫–∞ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: ${fallbackError}`;
      console.error(errorMsg);
      throw new Error(errorMsg);
    }
  }
}

async function humanType(page: Page, element: any, text: string) {
  try {
    await humanClick(page, element);
    await page.waitForTimeout(getRandomDelay(100, 200));
    
    for (const char of text) {
      await page.keyboard.type(char);
      await page.waitForTimeout(getHumanTypingDelay());
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª –≤–≤–µ–¥–µ–Ω
    try {
      const currentValue = await element.evaluate((el: HTMLInputElement) => el.value || el.textContent);
      if (currentValue && !currentValue.includes(text)) {
        throw new Error(`–¢–µ–∫—Å—Ç –Ω–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –û–∂–∏–¥–∞–ª—Å—è '${text}', –ø–æ–ª—É—á–µ–Ω–æ '${currentValue}'`);
      }
    } catch (checkError) {
      console.log('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', checkError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç —Å–≤–æ–π—Å—Ç–≤–æ value
    }
    
    await page.waitForTimeout(getRandomDelay(200, 500));
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—é –æ–±—ã—á–Ω—ã–π:', error);
    try {
      await element.type(text);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±—ã—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
      try {
        const currentValue = await element.evaluate((el: HTMLInputElement) => el.value || el.textContent);
        if (currentValue && !currentValue.includes(text)) {
          throw new Error(`–¢–µ–∫—Å—Ç –Ω–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –û–∂–∏–¥–∞–ª—Å—è '${text}', –ø–æ–ª—É—á–µ–Ω–æ '${currentValue}'`);
        }
      } catch (checkError) {
        // –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
      }
    } catch (fallbackError) {
      const errorMsg = `–û–®–ò–ë–ö–ê –í–í–û–î–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç '${text}' –Ω–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –º–µ—Ç–æ–¥–æ–º, –Ω–∏ –æ–±—ã—á–Ω—ã–º. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}. –û—à–∏–±–∫–∞ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: ${fallbackError}`;
      console.error(errorMsg);
      throw new Error(errorMsg);
    }
  }
}

async function detectDeadBrowser(): Promise<boolean> {
  try {
    if (!globalPage) return true;
    
    await globalPage.evaluate(() => document.title);
    return false;
  } catch (error) {
    console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –º–µ—Ä—Ç–≤—ã–π –±—Ä–∞—É–∑–µ—Ä:', error);
    return true;
  }
}

async function detectFacebookError(): Promise<boolean> {
  try {
    if (!globalPage) return false;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –æ—à–∏–±–∫–∏
    const errorElement = await globalPage.$('span.x193iq5w.xeuugli.x13faqbe.x1vvkbs.x1xmvt09.x1lliihq.x1s928wv.xhkezso.x1gmr53x.x1cpjm7i.x1fgarty.x1943h6x.xtoi2st.x3x7a5m.x1603h9y.x1u7k74.x1xlr1w8.xi81zsa.x2b8uid[dir="auto"]');
    
    if (errorElement) {
      const text = await errorElement.textContent();
      if (text && text.includes('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')) {
        console.log('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ Facebook –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É');
        return true;
      }
    }
    
    // –ó–∞–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
    const errorByText = await globalPage.locator('text=–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞').first();
    if (await errorByText.count() > 0) {
      console.log('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ Facebook –ø–æ —Ç–µ–∫—Å—Ç—É');
      return true;
    }
    
    return false;
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è Facebook:', error);
    return false;
  }
}

async function restartBrowser(): Promise<boolean> {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...');
    
    if (globalPage) {
      try {
        const browser = globalPage.context().browser();
        globalPage = null;
        if (browser) {
          await browser.close();
        }
      } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞:', e);
      }
    }
    
    if (globalBrowser) {
      try {
        await globalBrowser.close();
      } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞:', e);
      }
      globalBrowser = null;
    }
    
    await cleanupSingletonLock();
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏
    const userDataDir = path.resolve(__dirname, '../../backend/sessions/fb-browser-session');
    
    try {
      globalBrowser = await firefox.launchPersistentContext(userDataDir, {
        headless: false,
        viewport: { width: 1366, height: 768 },
        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0',
        args: [
          '--disable-extensions',
          '--disable-notifications',
          '--disable-popup-blocking'
        ],
        acceptDownloads: true,
        bypassCSP: true,
        ignoreHTTPSErrors: true,
        javaScriptEnabled: true,
        offline: false,
        permissions: ['notifications', 'geolocation']
      });
      
      const page = await globalBrowser.newPage();
      globalPage = page;
      
      await page.addInitScript(() => {
        Object.defineProperty(navigator, 'webdriver', { 
          get: () => undefined,
          configurable: true 
        });
        
        Object.defineProperty(navigator, 'plugins', { 
          get: () => ({
            length: 3,
            0: { name: 'Chrome PDF Plugin', description: 'Portable Document Format', filename: 'internal-pdf-viewer' },
            1: { name: 'Chrome PDF Viewer', description: '', filename: 'mhjfbmdgcfjbbpaeojofohoefgiehjai' },
            2: { name: 'Native Client', description: '', filename: 'internal-nacl-plugin' }
          }),
          configurable: true 
        });
        
        Object.defineProperty(navigator, 'languages', { 
          get: () => ['ru-RU', 'ru', 'en-US', 'en'],
          configurable: true 
        });
      });
      
      await page.goto('https://www.facebook.com/marketplace', {
        waitUntil: 'domcontentloaded',
        timeout: 60000
      });
      
      await page.waitForTimeout(getRandomDelay(2000, 4000));
      await humanMouseMove(page);
      
      console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω');
      updateStatus({ active: true, stage: 'browser_restarted' });
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞:', error);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:', error);
    return false;
  }
}

async function autoRecover(): Promise<boolean> {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ Facebook...');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const savedState = { ...currentAppState };
    
    // –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
    const restarted = await restartBrowser();
    if (!restarted) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏');
      return false;
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    currentAppState = savedState;
    await restoreState();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (currentAppState.location && currentAppState.radius) {
      try {
        console.log('üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ñ–∏–ª—å—Ç—Ä –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const mockReq = { body: { city: currentAppState.location, radius: currentAppState.radius } } as any;
        const mockRes = { 
          status: () => ({ json: () => {} }),
          json: () => {},
          send: () => {}
        } as any;
        
        await handleSetLocation(mockReq, mockRes);
        console.log('‚úÖ –§–∏–ª—å—Ç—Ä –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } catch (e) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', e);
      }
    }
    
    if (currentAppState.minPrice !== undefined || currentAppState.maxPrice !== undefined) {
      try {
        console.log('üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ñ–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã...');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const mockReq = { body: { minPrice: currentAppState.minPrice, maxPrice: currentAppState.maxPrice } } as any;
        const mockRes = { 
          status: () => ({ json: () => {} }),
          json: () => {},
          send: () => {}
        } as any;
        
        await handleSetPriceFilter(mockReq, mockRes);
        console.log('‚úÖ –§–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } catch (e) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã:', e);
      }
    }
    
    if (currentAppState.minYear !== undefined || currentAppState.maxYear !== undefined) {
      try {
        console.log('üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ñ–∏–ª—å—Ç—Ä –≥–æ–¥–∞...');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const mockReq = { body: { minYear: currentAppState.minYear, maxYear: currentAppState.maxYear } } as any;
        const mockRes = { 
          status: () => ({ json: () => {} }),
          json: () => {},
          send: () => {}
        } as any;
        
        await handleSetYearFilter(mockReq, mockRes);
        console.log('‚úÖ –§–∏–ª—å—Ç—Ä –≥–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } catch (e) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–¥–∞:', e);
      }
    }
    
    console.log('‚úÖ –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    return false;
  }
}

async function handleCriticalError(errorContext: string, error: any): Promise<boolean> {
  console.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ ${errorContext}: ${error}`);
  
  // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  const recovered = await autoRecover();
  if (recovered) {
    console.log(`‚úÖ –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤ ${errorContext} —É—Å–ø–µ—à–Ω–æ`);
    return true;
  }
  
  console.log(`‚ùå –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤ ${errorContext} –Ω–µ —É–¥–∞–ª–æ—Å—å`);
  return false;
}

async function handleRestartBrowser(req: Request, res: Response): Promise<Response> {
  try {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ API...');
    
    const restarted = await restartBrowser();
    if (restarted) {
      await restoreState();
      return res.json({
        success: true,
        message: "–ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
        status: "restarted"
      });
    } else {
      return res.status(500).json({
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä",
        status: "restart_failed"
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:', error);
    return res.status(500).json({
      success: false,
      error: `–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: ${error}`,
      status: "error"
    });
  }
}

async function restoreState(): Promise<void> {
  try {
    if (!globalPage) return;
    
    console.log('üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    if (currentAppState.selectedCategory) {
      console.log(`–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${currentAppState.selectedCategory}`);
      const targetCategory = categories.find(c => c.name === currentAppState.selectedCategory);
      if (targetCategory) {
        try {
          const found = await globalPage.evaluate((categoryName) => {
            const spans = Array.from(document.querySelectorAll('span.x193iq5w'));
            for (const span of spans) {
              if (span.textContent?.trim() === categoryName) {
                span.dispatchEvent(new MouseEvent('click', {
                  view: window,
                  bubbles: true,
                  cancelable: true,
                  buttons: 1
                }));
                return true;
              }
            }
            return false;
          }, currentAppState.selectedCategory);
          
          if (found) {
            await globalPage.waitForTimeout(getRandomDelay(1000, 2000));
          }
        } catch (e) {
          console.log('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', e);
        }
      }
    }
    
    if (currentAppState.searchQuery) {
      console.log(`–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–æ–∏—Å–∫: ${currentAppState.searchQuery}`);
      try {
        const searchInput = await globalPage.$('input[type="search"][placeholder="–ü–æ–∏—Å–∫ –≤ Marketplace"]');
        if (searchInput) {
          await humanType(globalPage, searchInput, currentAppState.searchQuery);
          await globalPage.keyboard.press('Enter');
          await globalPage.waitForTimeout(getRandomDelay(2000, 3000));
        }
      } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞:', e);
      }
    }
    
    console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
  }
}
try {
  const categoriesPath = path.join(process.cwd(), 'fb-mk.json');
  if (fs.existsSync(categoriesPath)) {
    const rawData = fs.readFileSync(categoriesPath, 'utf8');
    const jsonData = JSON.parse(rawData);
    categories = jsonData.categories || [];
  }
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
}
function updateStatus(updates: Partial<AppStatus>) {
  appStatus = { ...appStatus, ...updates };
  console.log(`<status>${JSON.stringify(appStatus)}</status>`);
}
function setupApiServer() {
  const app = express();
  app.use(cors());
  app.use(express.json());
  app.get('/status', (req, res) => {
    res.json({
      ...appStatus,
      categoriesCount: categories.length
    });
  });
  app.get('/categories', (req, res) => {
    res.json(categories);
  });
  app.get('/port', (req, res) => {
    res.json({
      port: API_PORT
    });
  });
  app.post('/search', (req, res) => {
    handleSearch(req, res).catch(error => {
      res.status(500).json({
        success: false,
        error: String(error)
      });
    });
  });
  app.post('/set-price-filter', (req, res) => {
    handleSetPriceFilter(req, res).catch(error => {
      res.status(500).json({
        success: false,
        error: String(error)
      });
    });
  });
  app.post('/set-year-filter', (req, res) => {
    handleSetYearFilter(req, res).catch(error => {
      res.status(500).json({
        success: false,
        error: String(error)
      });
    });
  });
  app.post('/set-location', (req, res) => {
    handleSetLocation(req, res).catch(error => {
      res.status(500).json({
        success: false,
        error: String(error)
      });
    });
  });
  app.get('/listings', (req, res) => {
    const count = req.query.count ? parseInt(req.query.count as string) : 5;
    handleGetListings(req, res, count).catch(error => {
      res.status(500).json({
        success: false,
        error: String(error)
      });
    });
  });
  app.post('/refresh-page', (req, res) => {
    handleRefreshPage(req, res).catch(error => {
      res.status(500).json({
        success: false,
        error: String(error)
      });
    });
  });
  app.post('/navigate-to-marketplace', (req, res) => {
    handleNavigateToMarketplace(req, res).catch(error => {
      res.status(500).json({
        success: false,
        error: String(error)
      });
    });
  });
  app.post('/restart-browser', (req, res) => {
    handleRestartBrowser(req, res).catch(error => {
      res.status(500).json({
        success: false,
        error: String(error)
      });
    });
  });
  app.post('/set-age-filter', (req, res) => {
    handleSetAgeFilter(req, res).catch(error => {
      res.status(500).json({
        success: false,
        error: String(error)
      });
    });
  });
  app.post('/clear-image-cache', (req, res) => {
    handleClearImageCache(req, res).catch(error => {
      res.status(500).json({ success: false, error: String(error) });
    });
  });
  app.post('/geocode-city', (req, res) => {
    handleGeocodeCity(req, res).catch((error: any) => {
      res.status(500).json({ success: false, error: String(error) });
    });
  });
  return new Promise<number>((resolve, reject) => {
    function tryListen(port: number, backupIndex: number = 0) {
      apiServer = app.listen(port, () => {
        const actualPort = (apiServer.address() as AddressInfo).port;
        console.log(`API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${actualPort}`);
        console.log(`–°—Ç–∞—Ç—É—Å: http://localhost:${actualPort}/status`);
        console.log(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä—Ç–µ: http://localhost:${actualPort}/port`);
        console.log(`–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: http://localhost:${actualPort}/categories`);
        console.log(`–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: POST http://localhost:${actualPort}/select-category —Å JSON {"category":"–ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"}`);
        console.log(`–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–µ–Ω—ã: POST http://localhost:${actualPort}/set-price-filter —Å JSON {"minPrice":1000, "maxPrice":5000}`);
        console.log(`–ü–æ–∏—Å–∫: POST http://localhost:${actualPort}/search —Å JSON {"query":"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"}`);
        console.log(`–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã: GET http://localhost:${actualPort}/listings?count=5`);
        console.log(`–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: POST http://localhost:${actualPort}/navigate-to-marketplace`);
        API_PORT = actualPort;
        try {
          const portFilePath = path.join(process.cwd(), 'api_port.txt');
          fs.writeFileSync(portFilePath, actualPort.toString(), 'utf8');
          console.log(`–¢–µ–∫—É—â–∏–π –ø–æ—Ä—Ç API (${actualPort}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${portFilePath}`);
        } catch (err) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Ä—Ç–∞ –≤ —Ñ–∞–π–ª: ${err}`);
        }
        resolve(actualPort);
      }).on('error', (err: any) => {
        if (err.code === 'EADDRINUSE') {
          console.log(`–ü–æ—Ä—Ç ${port} –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É—é —Å–ª–µ–¥—É—é—â–∏–π...`);
          if (backupIndex < BACKUP_PORTS.length) {
            tryListen(BACKUP_PORTS[backupIndex], backupIndex + 1);
          } else {
            tryListen(0);
          }
        } else {
          console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: ${err}`);
          reject(err);
        }
      });
    }
    tryListen(API_PORT);
  });
}
async function handleSetPriceFilter(req: Request, res: Response): Promise<Response> {
  if (!globalPage) {
    return res.status(400).json({
      success: false, 
      error: "–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    });
  }
  const { minPrice, maxPrice } = req.body;
  if ((minPrice === undefined || minPrice === null) && (maxPrice === undefined || maxPrice === null)) {
    return res.status(400).json({
      success: false,
      error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: minPrice –∏–ª–∏ maxPrice"
    });
  }
  try {
    console.log(`–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ñ–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã: –º–∏–Ω–∏–º—É–º ${minPrice || '-'}, –º–∞–∫—Å–∏–º—É–º ${maxPrice || '-'}`);
    
    const minPriceSelectors = [
      'input[placeholder="–ú–∏–Ω."][aria-label="–ú–∏–Ω–∏–º—É–º"]',
      'input[placeholder="–ú–∏–Ω."]',
      'input.x1i10hfl.xggy1nq.xtpw4lu.x1tutvks.x1s3xk63.x1s07b3s.x1kdt53j.x1a2a7pz.xmjcpbm.x8cjs6t.x3sou0m.x80vd3b.x12u81az.xhk9q7s.x1otrzb0.x1i1ezom.x1o6z2jb.x13fuv20.x18b5jzi.x1q0q8m5.x1t7ytsu.x178xt8z.x1lun4ml.xso031l.xpilrb4.x9f619.xzsf02u.x1qlqyl8.xk50ysn.x6ikm8r.x1y1aw1k.xwib8y2.x1g0dm76.xpdmqnj.xh8yej3.xha3pab.xyc4ar7.x1b3pals.x10bruuh.x108a08w.x1fiakjg.xacio93.xr7akr5.x1yc453h.xc9qbxq[placeholder="–ú–∏–Ω."][aria-label="–ú–∏–Ω–∏–º—É–º"]'
    ];
    
    const maxPriceSelectors = [
      'input[placeholder="–ú–∞–∫—Å."][aria-label="–ú–∞–∫—Å–∏–º—É–º"]',
      'input[placeholder="–ú–∞–∫—Å."]',
      'label.xzsf02u.x6prxxf input.x1i10hfl.xggy1nq.xtpw4lu.x1tutvks.x1s3xk63.x1s07b3s.x1kdt53j.x1a2a7pz.xmjcpbm.x8cjs6t.x3sou0m.x80vd3b.x12u81az.xhk9q7s.x1otrzb0.x1i1ezom.x1o6z2jb.x13fuv20.x18b5jzi.x1q0q8m5.x1t7ytsu.x178xt8z.x1lun4ml.xso031l.xpilrb4.x9f619.xzsf02u.x1qlqyl8.xk50ysn.x6ikm8r.x1y1aw1k.xwib8y2.x1g0dm76.xpdmqnj.xh8yej3.xha3pab.xyc4ar7.x1b3pals.x10bruuh.x108a08w.x1fiakjg.xacio93.xr7akr5.x1yc453h.xc9qbxq[placeholder="–ú–∞–∫—Å."][aria-label="–ú–∞–∫—Å–∏–º—É–º"]'
    ];
    
      if (minPrice !== undefined && minPrice !== null) {
      const minPriceInput = await findElement(globalPage, minPriceSelectors, '–ø–æ–ª–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã');
      if (minPriceInput) {
        await safeType(globalPage, minPriceInput, minPrice.toString());
        console.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã: ${minPrice}`);
      }
    }
    
      if (maxPrice !== undefined && maxPrice !== null) {
      const maxPriceInput = await findElement(globalPage, maxPriceSelectors, '–ø–æ–ª–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã');
      if (maxPriceInput) {
        await safeType(globalPage, maxPriceInput, maxPrice.toString());
        console.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã: ${maxPrice}`);
      }
    }
    
    await globalPage.waitForTimeout(1000);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ü–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    currentAppState.minPrice = minPrice !== undefined && minPrice !== null ? minPrice : undefined;
    currentAppState.maxPrice = maxPrice !== undefined && maxPrice !== null ? maxPrice : undefined;
    
    return res.json({
      success: true,
      message: `–§–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –º–∏–Ω=${minPrice || '-'}, –º–∞–∫—Å=${maxPrice || '-'}`,
      status: "completed"
    });
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–µ–Ω—ã: ${error}`);
    return res.status(500).json({
      success: false,
      error: `–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã: ${error}`,
      status: "failed"
    });
  }
}
async function handleSearch(req: Request, res: Response): Promise<Response> {
  if (!globalPage) {
    return res.status(400).json({
      success: false, 
      error: "–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    });
  }
  const { query } = req.body;
  if (!query || typeof query !== 'string') {
    return res.status(400).json({
      success: false,
      error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä query —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞"
    });
  }
  try {
    console.log(`–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"`);
    
    // –°–µ–ª–µ–∫—Ç–æ—Ä—ã, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏—è—Ö Facebook Marketplace
    const searchSelectors = [
      '.x9f619:nth-child(2) > div:nth-child(1) > .xjp7ctv:nth-child(1) [placeholder="–ü–æ–∏—Å–∫ –≤ Marketplace"]',
      'input[type="search"][placeholder="–ü–æ–∏—Å–∫ –≤ Marketplace"]', 
      'input[aria-label="–ü–æ–∏—Å–∫ –≤ Marketplace"]',
      'input[type="search"]',
      '.x18bame2 > [placeholder="–ü–æ–∏—Å–∫ –≤ Marketplace"]'
    ];
    
    // –ò—â–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
    let searchInput = null;
    
    for (const selector of searchSelectors) {
      try {
        searchInput = await globalPage.$(selector);
        if (searchInput) {
          console.log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: ${selector}`);
          break;
        }
      } catch (e) {
        console.log(`–°–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${selector}`);
      }
    }
    
    if (!searchInput) {
      return res.status(404).json({
        success: false,
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
      });
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
    try {
      await globalPage.fill(searchSelectors[0], '');
      console.log('–ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω–æ');
    } catch (clearError) {
      try {
        await searchInput.click({ clickCount: 3 });
        await globalPage.keyboard.press('Backspace');
        console.log('–ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω–æ —á–µ—Ä–µ–∑ clickCount –∏ Backspace');
      } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞:', e);
      }
    }
    
    await globalPage.waitForTimeout(300);
    
    // –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
    try {
      await globalPage.fill(searchSelectors[0], query);
      console.log('–¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω —á–µ—Ä–µ–∑ fill');
    } catch (fillError) {
      try {
        await searchInput.type(query);
        console.log('–¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω —á–µ—Ä–µ–∑ type');
      } catch (typeError) {
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ JavaScript
          const fillByJs = async (text: string): Promise<boolean> => {
            if (!globalPage) return false;
            return await globalPage.evaluate(text => {
              const selectors = [
                '.x9f619:nth-child(2) > div:nth-child(1) > .xjp7ctv:nth-child(1) [placeholder="–ü–æ–∏—Å–∫ –≤ Marketplace"]',
                'input[type="search"][placeholder="–ü–æ–∏—Å–∫ –≤ Marketplace"]', 
                'input[aria-label="–ü–æ–∏—Å–∫ –≤ Marketplace"]',
                'input[type="search"]',
                '.x18bame2 > [placeholder="–ü–æ–∏—Å–∫ –≤ Marketplace"]'
              ];
              
              for (const selector of selectors) {
                try {
                  const input = document.querySelector(selector) as HTMLInputElement;
                  if (input) {
                    input.value = text;
                    input.dispatchEvent(new Event('input', { bubbles: true }));
                    return true;
                  }
                } catch (e) {}
              }
              return false;
            }, query);
          };
          
          await fillByJs(query);
          console.log('–¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω —á–µ—Ä–µ–∑ JavaScript');
        } catch (jsError) {
          return res.status(500).json({
            success: false, 
            error: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"
          });
        }
      }
    }
    
    // –ù–∞–∂–∞—Ç–∏–µ Enter –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
    try {
      await globalPage.keyboard.press('Enter');
      await globalPage.waitForTimeout(3000);
      console.log('–í—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–∏—Å–∫ –Ω–∞–∂–∞—Ç–∏–µ–º Enter');
    } catch (enterError) {
      try {
        await globalPage.evaluate(() => {
          const form = document.querySelector('form');
          if (form) form.submit();
        });
        await globalPage.waitForTimeout(3000);
        console.log('–í—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ submit —Ñ–æ—Ä–º—ã');
      } catch (submitError) {
        return res.status(500).json({
          success: false, 
          error: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫"
        });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
    const currentUrl = globalPage.url();
    if (currentUrl.includes('/search') || currentUrl.includes('q=')) {
      console.log(`–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      currentAppState.searchQuery = query;
      return res.json({
        success: true,
        message: `–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`,
        status: "completed",
        searchQuery: query
      });
    } else {
      return res.json({ 
        success: false, 
        error: "–ü–æ–∏—Å–∫ –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω",
        status: "failed"
      });
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: ${error}`);
    return res.status(500).json({
      success: false,
      error: `–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫: ${error}`,
      status: "failed"
    });
  }
}


function extractYearFromTitle(title: string): number | null {
  const yearMatch = title.match(/\b(19|20)\d{2}\b/);
  if (yearMatch && yearMatch[0]) {
    return parseInt(yearMatch[0], 10);
  }
  return null;
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ "17 —á. –Ω–∞–∑–∞–¥", "–Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥" ‚Üí –º–∏–Ω—É—Ç—ã
function parseAgeToMinutes(raw: string): number | null {
  try {
    raw = raw.toLowerCase().trim();
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    raw = raw.replace(/\s+/g, ' ');
    // –ú–∏–Ω—É—Ç—ã
    if (/^(\d{1,2}) ?–º–∏–Ω(\.|—É—Ç|—É—Ç—ã|—É—Ç—É|—É—Ç–∞–º–∏)?/.test(raw)) {
      const m = raw.match(/(\d{1,2}) ?–º–∏–Ω/);
      if (!m) return null;
      const val = parseInt(m[1], 10);
      if (val >= 1 && val <= 59) return val;
      return null;
    }
    // –ß–∞—Å—ã
    if (/^(\d{1,2}) ?—á(\.|–∞—Å|–∞—Å–∞|–∞—Å–æ–≤|–∞—Å–∞–º–∏)?/.test(raw) || /^(\d{1,2}) ?—á–∞—Å(–∞|–æ–≤|–∞–º–∏)?/.test(raw)) {
      const m = raw.match(/(\d{1,2}) ?—á/);
      if (!m) return null;
      const val = parseInt(m[1], 10);
      if (val >= 1 && val <= 23) return val * 60;
      return null;
    }
    // –î–Ω–∏
    if (/^(\d{1,2}) ?–¥(–Ω\.|–µ–Ω—å|–Ω—è|–Ω–µ–π|–Ω—è–º–∏)?/.test(raw) || /^(\d{1,2}) ?–¥–µ–Ω—å/.test(raw)) {
      const m = raw.match(/(\d{1,2}) ?–¥/);
      if (!m) return null;
      const val = parseInt(m[1], 10);
      if (val >= 1 && val <= 6) return val * 1440;
      return null;
    }
    // "–¥–µ–Ω—å –Ω–∞–∑–∞–¥"
    if (/^–¥–µ–Ω—å/.test(raw)) return 1440;
    // –ù–µ–¥–µ–ª—è
    if (/^–Ω–µ–¥–µ–ª/.test(raw)) return 10080;
    if (/^(\d{1,2}) ?–Ω–µ–¥–µ–ª/.test(raw)) {
      const m = raw.match(/(\d{1,2}) ?–Ω–µ–¥–µ–ª/);
      if (!m) return null;
      const val = parseInt(m[1], 10);
      if (val >= 1 && val <= 4) return val * 10080;
      return null;
    }
    // "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω." –±–µ–∑ —á–∏—Å–ª–∞
    if (/^–¥(–µ–Ω—å|–Ω—è|–Ω\.)/.test(raw)) return 1440;
    // "–Ω–µ–¥–µ–ª—é", "–Ω–µ–¥.", "–Ω–µ–¥ –Ω–∞–∑–∞–¥"
    if (/^–Ω–µ–¥(–µ–ª—é|\.|\b)/.test(raw)) return 10080;
    return null;
  } catch {
    return null;
  }
}

// –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ –º–∏–Ω—É—Ç–∞—Ö
async function getListingAgeMinutes(url: string): Promise<number | null> {
  if (!globalBrowser) return null;
  let page: Page | null = null;
  try {
    page = await globalBrowser.newPage();
    if (!page) return null;
    await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 30000 });
    await page.waitForTimeout(getRandomDelay(500, 1000));
    const abbr = await page.$('abbr[aria-label]');
    if (!abbr) return null;
    const label = await abbr.getAttribute('aria-label');
    if (!label) return null;
    const minutes = parseAgeToMinutes(label);
    return minutes;
  } catch (e) {
    console.log('–û—à–∏–±–∫–∞ getListingAgeMinutes:', e);
    return null;
  } finally {
    if (page) {
      try { await page.close(); } catch {}
    }
  }
}

async function handleNavigateToMarketplace(req: Request, res: Response): Promise<Response> {
  if (!globalPage) {
    return res.status(400).json({
      success: false, 
      error: "–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    });
  }
  
  try {
    console.log('–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Facebook Marketplace...');
    await globalPage.goto('https://www.facebook.com/marketplace', {
      waitUntil: 'domcontentloaded',
      timeout: 30000
    });
    
    await globalPage.waitForTimeout(2000);
    
    try {
      console.log('–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞...');
      const closeButton = await globalPage.waitForSelector('div[aria-label="–ó–∞–∫—Ä—ã—Ç—å"][role="button"]', { timeout: 3000 }).catch(() => null);
      if (closeButton) {
        console.log('–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞, –∫–ª–∏–∫–∞—é...');
        await closeButton.click().catch(err => console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è:', err));
        await globalPage.waitForTimeout(1000);
        console.log('–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
      }
    } catch (err) {
      console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞:', err);
    }
    
    console.log('–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Marketplace –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    return res.json({
      success: true,
      message: "–£—Å–ø–µ—à–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Facebook Marketplace",
      status: "completed"
    });
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ Marketplace: ${error}`);
    return res.status(500).json({
      success: false,
      error: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Marketplace: ${error}`,
      status: "failed"
    });
  }
}
async function handleRefreshPage(req: Request, res: Response): Promise<Response> {
  if (!globalPage) {
    return res.status(400).json({
      success: false, 
      error: "–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    });
  }
  
  try {
    console.log('–û–±–Ω–æ–≤–ª—è—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Marketplace...');
    
    const isDead = await detectDeadBrowser();
    if (isDead) {
      console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä –º–µ—Ä—Ç–≤, –≤—ã–ø–æ–ª–Ω—è—é –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...');
      const restarted = await restartBrowser();
      if (restarted) {
        await restoreState();
        return res.json({
          success: true,
          message: "–ë—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
          status: "restarted"
        });
      } else {
        return res.status(500).json({
          success: false,
          error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä",
          status: "restart_failed"
        });
      }
    }
    
    await globalPage.reload({ waitUntil: 'domcontentloaded', timeout: 30000 });
    console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    return res.json({
      success: true,
      message: "–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
      status: "completed"
    });
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
    
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∏–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    if (String(error).includes('Timeout') || 
        String(error).includes('NS_BINDING_ABORTED') ||
        String(error).includes('detached')) {
      
      console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞, –≤—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...');
      const recovered = await handleCriticalError('refresh-page', error);
      
        return res.json({
        success: recovered,
        message: recovered ? '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞' : '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞',
        status: recovered ? "restarted" : "failed"
        });
    }
    
    return res.status(500).json({
      success: false,
      error: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${error}`,
      status: "failed"
    });
  }
}
async function handleGetListings(req: Request, res: Response, count: number = 5): Promise<Response> {
  const maxRetries = 3;
  let retryCount = 0;
  
  while (retryCount < maxRetries) {
    if (!globalPage) {
      return res.status(400).json({
        success: false, 
        error: "–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
      });
    }
    
    try {
      const isDead = await detectDeadBrowser();
      if (isDead) {
        console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä –º–µ—Ä—Ç–≤, –≤—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...');
        const restarted = await restartBrowser();
        if (restarted) {
          await restoreState();
        } else {
          retryCount++;
          if (retryCount >= maxRetries) {
            return res.status(500).json({
              success: false,
              error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫"
            });
          }
          await new Promise(resolve => setTimeout(resolve, 5000 * retryCount));
          continue;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ Facebook –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤
      const hasFacebookError = await detectFacebookError();
      if (hasFacebookError) {
        console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ Facebook, –∑–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...');
        const recovered = await autoRecover();
        if (recovered) {
          console.log('‚úÖ –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–≤—Ç–æ—Ä—è—é –ø–æ–ø—ã—Ç–∫—É...');
          retryCount++;
          if (retryCount >= maxRetries) {
            return res.status(500).json({
              success: false,
              error: "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
            });
          }
          await new Promise(resolve => setTimeout(resolve, 2000));
          continue;
        } else {
          return res.status(500).json({
            success: false,
            error: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ Facebook"
          });
        }
      }
      
      console.log(`–ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ ${count} —Ç–æ–≤–∞—Ä–æ–≤ —Å Marketplace... (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${maxRetries})`);
    const imgDir = path.join(process.cwd(), 'src', 'img');
    if (!fs.existsSync(imgDir)) {
      fs.mkdirSync(imgDir, { recursive: true });
      console.log(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imgDir}`);
    }
    console.log('–û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤...');
    await globalPage.waitForTimeout(3000);
    console.log('–ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö...');
    const sortButton = await globalPage.$('div[role="button"].x1i10hfl.x1qjc9v5.xjbqb8w.xjqpnuy.xa49m3k.xqeqjp1.x2hbi6w.x13fuv20.xu3j5b3.x1q0q8m5.x26u7qi.x972fbf.xcfux6l.x1qhh985.xm0m39n.x9f619.x1ypdohk.xdl72j9.x2lah0s.xe8uvvx.xat24cr.x1mh8g0r.x2lwn1j.xeuugli.xexx8yu.x4uap5.x18d9i69.xkhd6sd.x1n2onr6.x16tdsg8.x1hl2dhg.xggy1nq.x1ja2u2z.x1t137rt.x1o1ewxj.x3x9cwd.x1e5q0jg.x13rtm0m.x1q0g3np.x87ps6o.x1lku1pv.x78zum5.x1a2a7pz.xqvfhly.x1emribx.xdj266r');
    if (sortButton) {
      try {
        await sortButton.click({ timeout: 3000 });
        await globalPage.waitForTimeout(500);
      } catch {
        try {
          await sortButton.evaluate((el) => (el as HTMLElement).click());
          await globalPage.waitForTimeout(500);
        } catch {
          const child = await sortButton.$('div,span');
          if (child) {
            await child.click({ timeout: 3000 });
            await globalPage.waitForTimeout(500);
          }
        }
      }
      console.log('–ò—â—É –æ–ø—Ü–∏—é "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ"...');
      try {
        const newPublicationOption = await globalPage.locator('span', { 
          hasText: '–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ' 
        }).first();
        if (await newPublicationOption.count() > 0) {
          console.log('–û–ø—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –ª–æ–∫–∞—Ç–æ—Ä –ø–æ —Ç–µ–∫—Å—Ç—É, –∫–ª–∏–∫–∞—é...');
          await newPublicationOption.click();
          await globalPage.waitForTimeout(1000);
        } else {
          const optionById = await globalPage.$('span[id="¬´r3j¬ª"]');
          if (optionById) {
            console.log('–û–ø—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ id="¬´r3j¬ª", –∫–ª–∏–∫–∞—é...');
            await optionById.click();
            await globalPage.waitForTimeout(1000);
          } else {
            const sortMenuItem = await globalPage.waitForSelector('span.x193iq5w.xeuugli.x13faqbe.x1vvkbs.x1xmvt09.x1lliihq.x1s928wv.xhkezso.x1gmr53x.x1cpjm7i.x1fgarty.x1943h6x.xudqn12.x3x7a5m.x6prxxf.xvq8zen.xk50ysn.xzsf02u.x1yc453h', { timeout: 3000 });
            if (sortMenuItem) {
              const text = await sortMenuItem.textContent();
              if (text && text.includes('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ')) {
                console.log('–û–ø—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä, –∫–ª–∏–∫–∞—é...');
                await sortMenuItem.click();
                await globalPage.waitForTimeout(1000);
              }
            } else {
              console.log('–ü—ã—Ç–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ–ø—Ü–∏—é —á–µ—Ä–µ–∑ JavaScript...');
              await globalPage.evaluate(() => {
                const allSpans = Array.from(document.querySelectorAll('span'));
                for (const span of allSpans) {
                  if (span.textContent && span.textContent.includes('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ')) {
                    (span as HTMLElement).click();
                    return true;
                  }
                }
                const radioItems = Array.from(document.querySelectorAll('div[aria-checked="false"][role="radio"]'));
                for (const radio of radioItems) {
                  const textSpan = radio.querySelector('span');
                  if (textSpan && textSpan.textContent && textSpan.textContent.includes('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ')) {
                    (radio as HTMLElement).click();
                    return true;
                  }
                }
                const exactRadioSelector = 'div[aria-checked="false"][role="radio"].x1i10hfl.x1qjc9v5.xjbqb8w.xjqpnuy.xa49m3k.xqeqjp1.x2hbi6w.x13fuv20.xu3j5b3.x1q0q8m5.x26u7qi.x972fbf.xcfux6l.x1qhh985.xm0m39n.x9f619.x1ypdohk.xdl72j9.x2lah0s.xe8uvvx.xdj266r.x11i5rnm.xat24cr.x1mh8g0r.x2lwn1j.xeuugli.xexx8yu.x4uap5.x18d9i69.x1sxyh0.xurb0ha.xexx8yu.x1n2onr6.x1ja2u2z.x1gg8mnh';
                const exactRadioButtons = document.querySelectorAll(exactRadioSelector);
                for (const radio of Array.from(exactRadioButtons)) {
                  const inner = radio.querySelector('div.x6s0dn4.x1q0q8m5.x1qhh985.xu3j5b3.xcfux6l.x26u7qi.xm0m39n.x13fuv20.x972fbf.x9f619.x78zum5.x1q0g3np.x1iyjqo2.xs83m0k.x1qughib.xat24cr.x11i5rnm.x1mh8g0r.xdj266r.xeuugli.x18d9i69.x1sxyh0.xurb0ha.xexx8yu.x1n2onr6.x1ja2u2z.x1gg8mnh');
                  if (inner) {
                    const textDiv = inner.querySelector('div.xod5an3.x16n37ib.x14vqqas.x1n2onr6.xqcrz7y');
                    if (textDiv) {
                      const targetSpan = radio.querySelector('span.x193iq5w.xeuugli.x13faqbe.x1vvkbs.x10flsy6.x1lliihq.x1s928wv.xhkezso.x1gmr53x.x1cpjm7i.x1fgarty.x1943h6x.x4zkp8e.x41vudc.x6prxxf.xvq8zen.x1s688f.xzsf02u');
                      if (targetSpan && targetSpan.textContent && targetSpan.textContent.includes('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ')) {
                        console.log('–ù–∞–π–¥–µ–Ω —Ç–æ—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–µ');
                        (radio as HTMLElement).click();
                        return true;
                      }
                    }
                  }
                }
                return false;
              });
              await globalPage.waitForTimeout(1000);
            }
          }
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ": ${error}`);
      }
      
      // –ö–ª–∏–∫ –Ω–∞ "–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
      try {
        console.log('–ò—â—É —ç–ª–µ–º–µ–Ω—Ç "–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"...');
        const datePostingElement = await globalPage.locator('span', { hasText: '–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è' }).first();
        if (await datePostingElement.count() > 0) {
          console.log('–≠–ª–µ–º–µ–Ω—Ç "–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è" –Ω–∞–π–¥–µ–Ω, –∫–ª–∏–∫–∞—é...');
          await datePostingElement.click();
          await globalPage.waitForTimeout(1000);
        } else {
          // –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
          const datePostingByClass = await globalPage.$('span.x193iq5w.xeuugli.x13faqbe.x1vvkbs.x10flsy6.x1lliihq.x1s928wv.xhkezso.x1gmr53x.x1cpjm7i.x1fgarty.x1943h6x.x4zkp8e.x41vudc.x6prxxf.xvq8zen.x1s688f.xzsf02u');
          if (datePostingByClass) {
            console.log('–≠–ª–µ–º–µ–Ω—Ç "–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è" –Ω–∞–π–¥–µ–Ω –ø–æ –∫–ª–∞—Å—Å—É, –∫–ª–∏–∫–∞—é...');
            await datePostingByClass.click();
            await globalPage.waitForTimeout(1000);
          }
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ "–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è": ${error}`);
      }
      
      // –ö–ª–∏–∫ –Ω–∞ "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"
      try {
        console.log('–ò—â—É —ç–ª–µ–º–µ–Ω—Ç "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"...');
        const last24HoursElement = await globalPage.locator('span', { hasText: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞' }).first();
        if (await last24HoursElement.count() > 0) {
          console.log('–≠–ª–µ–º–µ–Ω—Ç "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞" –Ω–∞–π–¥–µ–Ω, –∫–ª–∏–∫–∞—é...');
          await last24HoursElement.click();
          await globalPage.waitForTimeout(1000);
        } else {
          // –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
          const last24HoursByClass = await globalPage.$('span.x193iq5w.xeuugli.x13faqbe.x1vvkbs.x10flsy6.x1lliihq.x1s928wv.xhkezso.x1gmr53x.x1cpjm7i.x1fgarty.x1943h6x.x4zkp8e.x41vudc.x6prxxf.xvq8zen.xk50ysn.xzsf02u.x1yc453h');
          if (last24HoursByClass) {
            console.log('–≠–ª–µ–º–µ–Ω—Ç "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞" –Ω–∞–π–¥–µ–Ω –ø–æ –∫–ª–∞—Å—Å—É, –∫–ª–∏–∫–∞—é...');
            await last24HoursByClass.click();
            await globalPage.waitForTimeout(1000);
          }
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞": ${error}`);
      }
    }
    let items = await globalPage.evaluate((maxCount: number) => {
      const results: MarketplaceItem[] = [];
      const containers = document.querySelectorAll('div.x9f619.x78zum5.xdt5ytf.x1qughib.x1rdy4ex.xz9dl7a.xsag5q8.xh8yej3.xp0eagm.x1nrcals, div[aria-hidden="false"] h1, div.xyamay9.xv54qhq.x18d9i69.xf7dkkf, div.x9f619.x1ja2u2z.x78zum5.x2lah0s.xyamay9');
      const productCards: Element[] = [];
      containers.forEach(container => {
        let parent = container.parentElement;
        while (parent && parent.tagName !== 'A') {
          parent = parent.parentElement;
        }
        if (parent && parent.tagName === 'A' && parent.getAttribute('role') === 'link') {
          productCards.push(parent);
        }
      });
      if (productCards.length === 0) {
        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤');
        const alternativeCards = Array.from(document.querySelectorAll('a[role="link"]'))
          .filter(el => {
            const hasPrice = el.querySelector('span.x193iq5w[dir="auto"]');
            const hasImage = el.querySelector('img.x168nmei.x13lgxp2');
            return hasPrice && hasImage;
          });
        if (alternativeCards.length > 0) {
          productCards.push(...alternativeCards);
        }
      }
      for (let i = 0; i < Math.min(maxCount, productCards.length); i++) {
        const card = productCards[i] as HTMLAnchorElement;
        let price = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞";
        let title = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
        let location = "";
        let imageUrl = "";
        let itemUrl = "";
        const priceElement = card.querySelector('span.x193iq5w[dir="auto"]');
        if (priceElement) {
          price = priceElement.textContent || "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞";
        } else {
          const priceAlt = card.querySelector('div.x1xmf6yo span');
          if (priceAlt) price = priceAlt.textContent || price;
        }
        const titleElement = card.querySelector('span.x1lliihq.x6ikm8r.x10wlt62.x1n2onr6[style*="-webkit-box-orient"]');
        if (titleElement) {
          title = titleElement.textContent || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
        } else {
          const tAlt = card.querySelector('h1 span');
          if (tAlt) title = tAlt.textContent || title;
        }
        const locationElement = card.querySelector('span.x1lliihq.x6ikm8r.x10wlt62.x1n2onr6.xlyipyv.xuxw1ft');
        if (locationElement) {
          location = locationElement.textContent || "";
        } else {
          const locAlt = card.querySelector('a[href*="/marketplace/"] span');
          if (locAlt) location = locAlt.textContent || '';
        }
        const imageElement = card.querySelector('img.x168nmei.x13lgxp2');
        if (imageElement) {
          imageUrl = imageElement.getAttribute('src') || "";
        } else {
          const altImageElement = card.querySelector('img');
          if (altImageElement) {
            imageUrl = altImageElement.getAttribute('src') || "";
          }
        }
          const href = card.getAttribute('href');
          if (href) {
          itemUrl = (href.startsWith('http') ? href : `https://www.facebook.com${href}`).split('?')[0];
          } else {
            itemUrl = "";
        }
        // –ø–æ–ø—ã—Ç–∫–∞ –≤—ã—Ç–∞—â–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        let ageMinutes: number | null = null;
        try {
          const abbr = card.querySelector('abbr[aria-label]');
          if (abbr) {
            const raw = abbr.getAttribute('aria-label') || '';
            const txt = raw.toLowerCase().trim();
            const m = txt.match(/(\d+)/);
            const val = m ? parseInt(m[1], 10) : 0;
            if (/–º–∏–Ω/.test(txt)) ageMinutes = val;
            else if (/—á/.test(txt) || /—á–∞—Å/.test(txt)) ageMinutes = val * 60;
            else if (/–¥–Ω/.test(txt) || /–¥–µ–Ω—å/.test(txt)) ageMinutes = val * 1440;
            else if (/–Ω–µ–¥/.test(txt)) ageMinutes = val ? val * 10080 : 10080;
          }
        } catch {}

        results.push({
          price: price.trim(),
          title: title.trim(),
          location: location.trim(),
          imageUrl,
          itemUrl,
          ageMinutes: ageMinutes === null ? undefined : ageMinutes
        });
      }
      return results;
    }, count);
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${items.length}`);
    
    let filteredCount = 0;
    if (appStatus.yearFilterNotFound) {
      console.log('–§–∏–ª—å—Ç—Ä –≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –≥–æ–¥—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞...');
      if (appStatus.minYear !== undefined || appStatus.maxYear !== undefined) {
        console.log(`–ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≥–æ–¥–∞: –æ—Ç ${appStatus.minYear || '-'} –¥–æ ${appStatus.maxYear || '-'}`);
        const filteredItems = items.filter(item => {
          const year = extractYearFromTitle(item.title);
          if (year === null) return true;
          if (appStatus.minYear !== undefined && year < appStatus.minYear) {
            console.log(`–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –≥–æ–¥–æ–º ${year} < ${appStatus.minYear}: ${item.title}`);
            return false;
          }
          if (appStatus.maxYear !== undefined && year > appStatus.maxYear) {
            console.log(`–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –≥–æ–¥–æ–º ${year} > ${appStatus.maxYear}: ${item.title}`);
            return false;
          }
          
          return true;
        });
        
        filteredCount = items.length - filteredItems.length;
        console.log(`–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${filteredCount} –∏–∑ ${items.length}`);
        items = filteredItems;
      }
      items.sort((a, b) => {
        const yearA = extractYearFromTitle(a.title);
        const yearB = extractYearFromTitle(b.title);
        if (yearA !== null && yearB !== null) {
          return yearB - yearA;
        }
        if (yearA !== null) return -1;
        if (yearB !== null) return 1;
        return 0;
      });
      
      console.log('–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≥–æ–¥—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
    const uniqueUrls = new Set<string>();
    const uniqueTitles = new Set<string>();
    const originalItemsCount = items.length;
    items = items.filter(item => {
      if (!item.itemUrl) {
        console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ URL: ${item.title}`);
        return false;
      }
      if (uniqueUrls.has(item.itemUrl)) {
        console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø–æ URL: ${item.title} (${item.itemUrl})`);
        return false;
      } 
      const itemSignature = `${item.title}_${item.price}_${item.location}`;
      if (uniqueTitles.has(itemSignature)) {
        console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É: ${itemSignature}`);
        return false;
      }
      uniqueUrls.add(item.itemUrl);
      uniqueTitles.add(itemSignature);
      return true;
    });
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞–≤–Ω–æ—Å—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    if (currentAppState.maxAgeMinutes && currentAppState.maxAgeMinutes > 0) {
      console.log(`–ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É: –Ω–µ —Å—Ç–∞—Ä—à–µ ${currentAppState.maxAgeMinutes} –º–∏–Ω—É—Ç`);
      const ageFiltered: MarketplaceItem[] = [];
      for (const itm of items) {
        let ageVal: number | null = itm.ageMinutes !== undefined ? itm.ageMinutes : null;
        if (ageVal === null) {
          ageVal = await getListingAgeMinutes(itm.itemUrl);
        }
        if (ageVal === null) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç: ${itm.itemUrl}`);
          continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
        if (ageVal <= currentAppState.maxAgeMinutes) {
          ageFiltered.push(itm);
        } else {
          console.log(`–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É (${ageVal} –º–∏–Ω > ${currentAppState.maxAgeMinutes}): ${itm.title}`);
        }
      }
      items = ageFiltered;
    }
    
    const duplicatesRemoved = originalItemsCount - items.length;
    console.log(`–£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicatesRemoved}`);
    
    let imageStats = {
      downloaded: 0,
      reused: 0,
      cached: 0
    };
    
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      if (item.imageUrl && globalPage) {
        try {
          const contentKey = `${item.title}_${item.price}_${item.location}`;
          
          if (imageCache.has(contentKey)) {
            const cachedPath = imageCache.get(contentKey)!;
            if (fs.existsSync(path.join(imgDir, cachedPath))) {
              console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${item.title} -> ${cachedPath}`);
              item.savedImagePath = `src/img/${cachedPath}`;
              imageStats.cached++;
              continue;
            } else {
              imageCache.delete(contentKey);
            }
          }

          console.log(`–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞: ${item.title}`);
          const fileName = generateStableFileName(item.title, item.price, item.location);
          const filePath = path.join(imgDir, fileName);
          
          if (fs.existsSync(filePath)) {
            console.log(`–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: ${fileName}`);
            item.savedImagePath = `src/img/${fileName}`;
            imageCache.set(contentKey, fileName);
            imageStats.reused++;
            continue;
          }

          try {
            await downloadImage(item.imageUrl, filePath);
            console.log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${filePath}`);
            item.savedImagePath = `src/img/${fileName}`;
            imageCache.set(contentKey, fileName);
            pruneImageCache();
            imageStats.downloaded++;
          } catch (imgErr) {
            console.error(`–û—à–∏–±–∫–∞ downloadImage: ${imgErr}`);
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error}`);
        }
      }
    }
    
    console.log(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: —Å–∫–∞—á–∞–Ω–æ ${imageStats.downloaded}, –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${imageStats.reused}, –∏–∑ –∫—ç—à–∞ ${imageStats.cached}`);
    
      return res.json({
        success: true,
        items,
        filteredCount,
        duplicatesRemoved,
        imageStats
      });
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}): ${error}`);
      
      if (String(error).includes('NS_BINDING_ABORTED') || String(error).includes('frame was detached')) {
        console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±—Ä–∞—É–∑–µ—Ä...');
        retryCount++;
        if (retryCount < maxRetries) {
          await new Promise(resolve => setTimeout(resolve, 3000 * retryCount));
          continue;
        }
      }
      
      retryCount++;
      if (retryCount < maxRetries) {
        await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));
        continue;
      }
      
      return res.status(500).json({
        success: false,
        error: `${error}`,
        retries: retryCount
      });
    }
  }
  
  return res.status(500).json({
    success: false,
    error: "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤",
    retries: maxRetries
  });
}
async function cleanupSingletonLock() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏
  const userDataDir = path.resolve(__dirname, '../../backend/sessions/fb-browser-session');
  const lockFiles = [
    path.join(userDataDir, 'SingletonLock'),
    path.join(userDataDir, 'SingletonCookie'),
    path.join(userDataDir, 'parent.lock'),
    path.join(userDataDir, '.parentlock')
  ];
  
  for (const lockPath of lockFiles) {
    if (fs.existsSync(lockPath)) {
      try {
        fs.unlinkSync(lockPath);
        console.log(`–£–¥–∞–ª–µ–Ω –±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª: ${lockPath}`);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${lockPath}:`, error);
      }
    }
  }
}
function cleanupPortFile() {
  try {
    const portFilePath = path.join(process.cwd(), 'api_port.txt');
    if (fs.existsSync(portFilePath)) {
      fs.unlinkSync(portFilePath);
      console.log('–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Å –ø–æ—Ä—Ç–æ–º API');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ—Ä—Ç–∞:', error);
  }
}

async function openFacebookMarketplace() {
  console.log('–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...');
  updateStatus({ stage: 'browser_starting' });
  try {
    await setupApiServer();
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏
    const userDataDir = path.resolve(__dirname, '../../backend/sessions/fb-browser-session');
    if (!fs.existsSync(userDataDir)) {
      fs.mkdirSync(userDataDir, { recursive: true });
      console.log(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è Firefox: ${userDataDir}`);
    }
    await cleanupSingletonLock();
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    try {
      globalBrowser = await firefox.launchPersistentContext(userDataDir, {
        headless: false,
        viewport: { width: 1366, height: 768 },
        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0',
        args: [
          '--disable-extensions',
          '--disable-notifications',
          '--disable-popup-blocking'
        ],
        acceptDownloads: true,
        bypassCSP: true,
        ignoreHTTPSErrors: true,
        javaScriptEnabled: true,
        offline: false,
        permissions: ['notifications', 'geolocation']
      });
      
      const page = await globalBrowser.newPage();
      globalPage = page;
      
      await page.addInitScript(() => {
        Object.defineProperty(navigator, 'webdriver', { 
          get: () => undefined,
          configurable: true 
        });
        
        Object.defineProperty(navigator, 'plugins', { 
          get: () => ({
            length: 3,
            0: { name: 'Chrome PDF Plugin', description: 'Portable Document Format', filename: 'internal-pdf-viewer' },
            1: { name: 'Chrome PDF Viewer', description: '', filename: 'mhjfbmdgcfjbbpaeojofohoefgiehjai' },
            2: { name: 'Native Client', description: '', filename: 'internal-nacl-plugin' }
          }),
          configurable: true 
        });
        
        Object.defineProperty(navigator, 'languages', { 
          get: () => ['ru-RU', 'ru', 'en-US', 'en'],
          configurable: true 
        });
      });
      
        await page.goto('https://www.facebook.com/marketplace', {
          waitUntil: 'domcontentloaded',
          timeout: 60000
        });
      
      await page.waitForTimeout(getRandomDelay(2000, 4000));
        await humanMouseMove(page);
      
      console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω');
      updateStatus({ active: true, stage: 'browser_restarted' });
      
      schedulePeriodicRestart(45);
      
      return true;
      } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞:', error);
      return false;
      }
    } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:', error);
    return false;
  }
}

async function schedulePeriodicRestart(intervalMinutes: number) {
  console.log(`–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${intervalMinutes} –º–∏–Ω—É—Ç.`);
  setInterval(async () => {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –ø–ª–∞–Ω–æ–≤—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏...');
      updateStatus({ restarting_soon: true, stage: 'scheduled_restart_pending' });
      
      console.log('–ü–∞—É–∑–∞ –Ω–∞ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ç–∫–µ–Ω–¥–∞...');
      await new Promise(resolve => setTimeout(resolve, 15000));
      
      await restartBrowser();
      await restoreState();
      
      updateStatus({ restarting_soon: false });
      console.log('‚úÖ –ü–ª–∞–Ω–æ–≤—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–ª–∞–Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:', error);
      updateStatus({ restarting_soon: false, stage: 'scheduled_restart_failed' });
    }
  }, intervalMinutes * 60 * 1000);
}

async function handleSetLocation(req: Request, res: Response): Promise<Response> {
  if (!globalPage) {
    return res.status(400).json({
      success: false,
      error: '–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
    });
  }
  const { city, radius, latitude, longitude } = req.body;
  console.log(`[set-location] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: –≥–æ—Ä–æ–¥ "${city}", —Ä–∞–¥–∏—É—Å ${radius ? radius + ' miles' : '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
  if (!city || typeof city !== 'string') {
    return res.status(400).json({
      success: false,
      error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥ (city)'
    });
  }
  try {
    console.log('[set-location] start', { city, radius });
    if (latitude === undefined || longitude === undefined || isNaN(Number(latitude)) || isNaN(Number(longitude))) {
      return res.status(400).json({ success: false, error: 'latitude_longitude_required' });
    }

    // quick geolocation path executed below

    try {
      const ctx = globalPage.context();
      await ctx.grantPermissions(['geolocation']);
      await ctx.setGeolocation({ latitude: Number(latitude), longitude: Number(longitude), accuracy: 50 });
      console.log(`[set-location] Geolocation applied lat=${latitude} lon=${longitude}`);

      // attempt to click compass with multiple strategies
      let compassClicked = false;
      try {
        const compassCss = 'div[aria-label^="–í—ã–±–æ—Ä –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"][role="button"]';
        const compass = await globalPage.$(compassCss);
        if (compass) {
          await safeClick(globalPage, compass);
          compassClicked = true;
        }
      } catch {}
      if (!compassClicked) {
        console.log('[set-location] Compass not found directly, opening location menu‚Ä¶');
        try {
          const menuBtn = await findElement(globalPage, [
            '#seo_filters div[role="button"]',
            'div[aria-label*="–≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"][role="button"]',
            '.x1i10hfl.xjbqb8w[role="button"]'
          ], '–∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è');
          if (menuBtn) {
            await safeClick(globalPage, menuBtn);
            await globalPage.waitForTimeout(800);
            const compass2 = await findElement(globalPage, [
              'i.xep6ejk',
              'div[role="button"] i[data-visualcompletion="css-img"]'
            ], '–∫–Ω–æ–ø–∫–∞ –∫–æ–º–ø–∞—Å–∞');
            if (compass2) {
              await safeClick(globalPage, compass2);
              compassClicked = true;
            }
          }
        } catch (fallbackErr) {
          console.error('[set-location] compass fallback error', fallbackErr);
        }
      }
      console.log(`[set-location] compassClicked_final=${compassClicked}`);

      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
      currentAppState.location = city;
      currentAppState.radius = radius;

      console.log(`[set-location] params received: city=${city}, radius=${radius}, lat=${latitude}, lon=${longitude}`);

      return res.json({ success: true, message: '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', status: 'completed' });
    } catch (geoErr) {
      console.error('[set-location] geolocation flow error', geoErr);
      // fallthrough to manual flow
    }

    let cityBlock = await globalPage.$('#seo_filters div[role="button"]');
    let cityBlockSelector = '#seo_filters div[role="button"]';
    if (!cityBlock) {
      cityBlock = await globalPage.$('div.x1i10hfl.x1qjc9v5.xjbqb8w.xjqpnuy[role="button"]');
      cityBlockSelector = 'div.x1i10hfl.x1qjc9v5.xjbqb8w.xjqpnuy[role="button"]';
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ Playwright
    if (!cityBlock) {
      cityBlock = await globalPage.$('.x1iyjqo2 > .x13faqbe');
      cityBlockSelector = '.x1iyjqo2 > .x13faqbe';
    }

    if (cityBlock) {
      console.log(`[set-location] cityBlock –Ω–∞–π–¥–µ–Ω –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: ${cityBlockSelector}, –∫–ª–∏–∫–∞—é`);
      try {
        await humanClick(globalPage, cityBlock, {timeout: 3000});
        await globalPage.waitForTimeout(getRandomDelay(800, 1500));
        console.log('[set-location] —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π click —Å—Ä–∞–±–æ—Ç–∞–ª');
      } catch (e) {
        console.log('[set-location] –æ–±—ã—á–Ω—ã–π click –ù–ï —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É—é —á–µ—Ä–µ–∑ evaluate');
        try {
          await cityBlock.evaluate((el: HTMLElement) => el.click());
          await globalPage.waitForTimeout(1000);
          console.log('[set-location] js click —á–µ—Ä–µ–∑ evaluate —Å—Ä–∞–±–æ—Ç–∞–ª');
        } catch (e2) {
          console.log('[set-location] js click –ù–ï —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É—é –¥–æ—á–µ—Ä–Ω–∏–π div/span');
          const child = await cityBlock.$('div,span');
          if (child) {
            try {
              await child.click({timeout: 3000});
              await globalPage.waitForTimeout(1000);
              console.log('[set-location] click –ø–æ –¥–æ—á–µ—Ä–Ω–µ–º—É div/span —Å—Ä–∞–±–æ—Ç–∞–ª');
            } catch (e3) {
              console.log('[set-location] click –ø–æ –¥–æ—á–µ—Ä–Ω–µ–º—É div/span –ù–ï —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É—é boundingBox');
              const box = await cityBlock.boundingBox();
              if (box) {
                await globalPage.mouse.click(box.x + box.width/2, box.y + box.height/2);
                await globalPage.waitForTimeout(1000);
                console.log('[set-location] click –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º boundingBox —Å—Ä–∞–±–æ—Ç–∞–ª');
              } else {
                console.log('[set-location] boundingBox –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
              }
            }
          } else {
            console.log('[set-location] –¥–æ—á–µ—Ä–Ω–∏–π div/span –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
          }
        }
      }
      console.log('[set-location] –∂–¥—É –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...');
      const locationInput = await globalPage.waitForSelector(
        'input[aria-label="–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –∏–ª–∏ –≥–æ—Ä–æ–¥"], input[placeholder*="–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å"], input[type="text"][aria-autocomplete="list"], #_r_1s_', 
        { timeout: 5000 }
      ).catch(() => null);
      if (!locationInput) {
        console.log('[set-location] –ø–æ–ª–µ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –ø—Ä–æ–±—É—é js-–ø–æ–∏—Å–∫...');
        const jsLocationInput = await globalPage.evaluateHandle(() => {
          const inputs = Array.from(document.querySelectorAll('input[type="text"]'));
          const exactInput = inputs.find(input => 
            input.getAttribute('aria-label') === '–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –∏–ª–∏ –≥–æ—Ä–æ–¥'
          );
          if (exactInput) return exactInput;
          const partialInput = inputs.find(input => {
            const label = input.getAttribute('aria-label') || '';
            return label.toLowerCase().includes('–≥–æ—Ä–æ–¥') || 
                   label.toLowerCase().includes('–∏–Ω–¥–µ–∫—Å') || 
                   label.toLowerCase().includes('–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏');
          });
          if (partialInput) return partialInput;
          return inputs.find(input => input.getAttribute('aria-autocomplete') === 'list') || null;
        });
        if (jsLocationInput && jsLocationInput.asElement()) {
          console.log('[set-location] –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ JS-–ø–æ–∏—Å–∫');
          const locationInputElement = jsLocationInput.asElement()!;
          await humanClick(globalPage, locationInputElement, { clickCount: 3 });
          await globalPage.keyboard.press('Backspace');
          await humanType(globalPage, locationInputElement, city);
        } else {
          console.log('[set-location] –ø–æ–ª–µ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é!');
          return res.status(404).json({
            success: false,
            error: '–ü–æ–ª–µ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é'
          });
        }
      } else {
        console.log('[set-location] locationInput –Ω–∞–π–¥–µ–Ω, –≤–≤–æ–∂—É –≥–æ—Ä–æ–¥');
        await humanClick(globalPage, locationInput, { clickCount: 3 });
        await globalPage.keyboard.press('Backspace');
        await humanType(globalPage, locationInput, city);
      }
      await globalPage.waitForTimeout(1500);
      const firstAutocomplete = await globalPage.$('ul[role="listbox"] li, div[role="option"]');
      if (firstAutocomplete) {
        console.log('[set-location] –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –Ω–∞–π–¥–µ–Ω, –∫–ª–∏–∫–∞—é');
        await humanClick(globalPage, firstAutocomplete);
        await globalPage.waitForTimeout(getRandomDelay(600, 1200));
      } else {
        console.log('[set-location] –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –ù–ï –Ω–∞–π–¥–µ–Ω');
      }
      if (radius) {
        console.log(`[set-location] –Ω–∞—á–∏–Ω–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–∞–¥–∏—É—Å–∞: ${radius} miles`);
        const allCombos = await globalPage.$$('label[role="combobox"]');
        let radiusCombo = null;
        for (const combo of allCombos) {
          const text = await combo.textContent();
          if (text && text.includes('–†–∞–¥–∏—É—Å')) {
            radiusCombo = combo;
            break;
          }
        }
        if (!radiusCombo) {
          const possibleCombos = await globalPage.$$('[role="button"]');
          for (const combo of possibleCombos) {
            const text = await combo.textContent();
            if (text && (text.includes('–º–∏–ª—å') || text.includes('—Ä–∞–¥'))) {
              radiusCombo = combo;
              break;
            }
          }
        }
        if (radiusCombo) {
          console.log('[set-location] radiusCombo –Ω–∞–π–¥–µ–Ω, –∫–ª–∏–∫–∞—é');
          try {
            await radiusCombo.evaluate((el: HTMLElement) => el.click());
            await globalPage.waitForTimeout(1000);
            console.log('[set-location] –∫–ª–∏–∫ –ø–æ radiusCombo –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ JS');
            const selectRadiusResult = await globalPage.evaluate((targetRadius) => {
              const listboxes = Array.from(document.querySelectorAll('[role="listbox"]'));
              if (!listboxes.length) return { success: false, reason: '–ù–µ –Ω–∞–π–¥–µ–Ω listbox' };
              const targetText = `${targetRadius} –º–∏–ª—å`;
              for (const listbox of listboxes) {
                const options = Array.from(listbox.querySelectorAll('[role="option"]'));
                for (const option of options) {
                  const spans = Array.from(option.querySelectorAll('span'));
                  for (const span of spans) {
                    if (span.textContent && span.textContent.trim() === targetText) {
                      (option as HTMLElement).click();
                      return { success: true, id: option.id, text: targetText };
                    }
                  }
                }
              }
              const allOptions = Array.from(document.querySelectorAll('div[role="option"]'));
              for (const option of allOptions) {
                const spans = Array.from(option.querySelectorAll('span'));
                for (const span of spans) {
                  if (span.textContent && span.textContent.trim() === targetText) {
                    try {
                      (option as HTMLElement).click();
                      return { success: true, id: option.id, text: targetText, method: 'global-search' };
                    } catch (e) {
                      return { success: false, reason: '–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞', error: String(e) };
                    }
                  }
                }
              }
              const allRadiusOptions = Array.from(document.querySelectorAll('span'))
                .filter(span => {
                  const text = span.textContent;
                  return text && /\d+ –º–∏–ª—å$/.test(text.trim());
                })
                .map(span => {
                  const text = span.textContent?.trim() || '';
                  const value = parseInt(text);
                  return {
                    element: span,
                    text,
                    value: isNaN(value) ? 0 : value,
                    diff: Math.abs((isNaN(value) ? 0 : value) - parseInt(targetRadius))
                  };
                })
                .sort((a, b) => a.diff - b.diff);
              if (allRadiusOptions.length > 0) {
                const closest = allRadiusOptions[0];
                let parent = closest.element.parentElement;
                while (parent && parent.getAttribute('role') !== 'option') {
                  parent = parent.parentElement;
                }
                if (parent) {
                  try {
                    (parent as HTMLElement).click();
                    return { 
                      success: true, 
                      id: parent.id, 
                      text: closest.text, 
                      method: 'closest-match', 
                      value: closest.value 
                    };
                  } catch (e) {
                    return { success: false, reason: '–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–º –∑–Ω–∞—á–µ–Ω–∏–∏', error: String(e) };
                  }
                }
                try {
                  const parentAny = closest.element.parentElement;
                  if (parentAny) {
                    (parentAny as HTMLElement).click();
                    return { success: true, text: closest.text, method: 'parent-span-click', value: closest.value };
                  } else {
                    (closest.element as HTMLElement).click();
                    return { success: true, text: closest.text, method: 'direct-span-click', value: closest.value };
                  }
                } catch (e) {
                  return { success: false, reason: '–û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–µ', error: String(e) };
                }
              }
              return { success: false, reason: '–ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–¥–∏—É—Å', options: allRadiusOptions.length };
            }, radius.toString());
            console.log('[set-location] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞ —á–µ—Ä–µ–∑ JS:', selectRadiusResult);
            if (selectRadiusResult.success) {
              console.log(`[set-location] –†–∞–¥–∏—É—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω: ${selectRadiusResult.text || radius + ' miles'}`);
              await globalPage.waitForTimeout(1000);
            } else {
              console.log(`[set-location] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ä–∞–¥–∏—É—Å —á–µ—Ä–µ–∑ JS: ${JSON.stringify(selectRadiusResult)}`);
              console.log('[set-location] –∏—â—É –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ä–∞–¥–∏—É—Å–∞');
              const listbox = await globalPage.waitForSelector('[role="listbox"]', { timeout: 3000 }).catch(() => null);
              if (listbox) {
                console.log('[set-location] listbox –Ω–∞–π–¥–µ–Ω, –∏—â—É –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
                const radiusOption = await globalPage.waitForSelector(`[role="option"] span:text("${radius} –º–∏–ª—å")`, { timeout: 3000 }).catch(() => null);
                if (radiusOption) {
                  try {
                    await radiusOption.click({ timeout: 3000 });
                    console.log(`[set-location] –£—Å–ø–µ—à–Ω–æ –∫–ª–∏–∫–Ω—É–ª –Ω–∞ –æ–ø—Ü–∏—é "${radius} miles"`);
                    await globalPage.waitForTimeout(1000);
                  } catch (clickError) {
                    console.log(`[set-location] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –æ–ø—Ü–∏—é: ${clickError}`);
                    const MAX_RETRY = 3;
                    let retry = 0;
                    while (retry < MAX_RETRY) {
                      retry++;
                      console.log(`[set-location] –ü–æ–ø—ã—Ç–∫–∞ ${retry} –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞ —á–µ—Ä–µ–∑ JavaScript`);
                      try {
                        const jsResult = await globalPage.evaluate((targetRadius) => {
                          const radiusStr = `${targetRadius} –º–∏–ª—å`;
                          const options = Array.from(document.querySelectorAll('[role="option"]'));
                          for (const opt of options) {
                            if (opt.textContent && opt.textContent.includes(radiusStr)) {
                              (opt as HTMLElement).click();
                              return { success: true, text: radiusStr };
                            }
                          }
                          return { success: false };
                        }, radius);
                        if (jsResult.success) {
                          console.log(`[set-location] –£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω —Ä–∞–¥–∏—É—Å —á–µ—Ä–µ–∑ JS –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${retry}`);
                          break;
                        }
                      } catch (e) {
                        console.log(`[set-location] –û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ ${retry}: ${e}`);
                      }
                      await globalPage.waitForTimeout(500);
                    }
                  }
                } else {
                  console.log(`[set-location] –û–ø—Ü–∏—è "${radius} miles" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É`);
                }
              }
            }
          } catch (clickError) {
            console.log(`[set-location] –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ combobox: ${clickError}`);
          }
        } else {
          console.log('[set-location] radiusCombo –ù–ï –Ω–∞–π–¥–µ–Ω');
        }
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ä–∞–¥–∏—É—Å –º–∏–ª—å, –ø—Ä–æ–±—É–µ–º —Å –∫–∏–ª–æ–º–µ—Ç—Ä–∞–º–∏
        console.log('[set-location] –ü—Ä–æ–±—É–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–∞–¥–∏—É—Å –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)');
        try {
          // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞–¥–∏—É—Å–æ–≤
          const radiusSelector = await globalPage.$('.x1a8lsjc:nth-child(1)');
          if (radiusSelector && globalPage) {
            await radiusSelector.click().catch(async () => {
              const box = await radiusSelector.boundingBox();
              if (box) {
                await globalPage!.mouse.click(box.x + box.width/2, box.y + box.height/2);
              } else {
                await radiusSelector.evaluate((el: HTMLElement) => el.click());
              }
            });
            
            await globalPage.waitForTimeout(1000);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤—ã–π —Ä–∞–¥–∏—É—Å –≤—ã–±—Ä–∞—Ç—å
            let kmRadiusSelector = '';
            let kmValue = '';
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∏–ª–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤
            const milesValue = parseInt(radius.toString());
            if (milesValue <= 1) {
              kmRadiusSelector = '#_r_20___0 > .html-div';
              kmValue = '1 –∫–º';
            } else if (milesValue <= 3) {
              kmRadiusSelector = '#_r_20___1 > .html-div';
              kmValue = '2 –∫–º';
            } else if (milesValue <= 7) {
              kmRadiusSelector = '#_r_20___2';
              kmValue = '5 –∫–º';
            } else if (milesValue <= 15) {
              kmRadiusSelector = '#_r_20___3 > .html-div';
              kmValue = '10 –∫–º';
            } else if (milesValue <= 30) {
              kmRadiusSelector = '#_r_20___4 > .html-div';
              kmValue = '20 –∫–º';
            } else if (milesValue <= 50) {
              kmRadiusSelector = 'text=40 –∫–º';
              kmValue = '40 –∫–º';
            } else if (milesValue <= 70) {
              kmRadiusSelector = '#_r_20___6';
              kmValue = '60 –∫–º';
            } else if (milesValue <= 90) {
              kmRadiusSelector = 'text=80 –∫–º';
              kmValue = '80 –∫–º';
            } else if (milesValue <= 175) {
              kmRadiusSelector = 'text=100 –∫–º';
              kmValue = '100 –∫–º';
            } else if (milesValue <= 350) {
              kmRadiusSelector = '#_r_20___9 > .html-div';
              kmValue = '250 –∫–º';
            } else {
              kmRadiusSelector = '#_r_20___10';
              kmValue = '500 –∫–º';
            }
            
            console.log(`[set-location] –ü—Ä–æ–±—É—é –≤—ã–±—Ä–∞—Ç—å —Ä–∞–¥–∏—É—Å ${kmValue} —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ${kmRadiusSelector}`);
            
            // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
            const kmRadiusElement = await globalPage.$(kmRadiusSelector);
            if (kmRadiusElement) {
              await kmRadiusElement.click().catch(async () => {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞–ø—Ä—è–º—É—é, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
                if (globalPage) {
                  const textSelector = await globalPage.locator(`text=${kmValue}`).first();
                  if (await textSelector.count() > 0) {
                    await textSelector.click();
                    console.log(`[set-location] –†–∞–¥–∏—É—Å –≤—ã–±—Ä–∞–Ω —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä ${kmValue}`);
                  } else {
                    // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ JavaScript
                    await globalPage.evaluate((value) => {
                      const allElements = document.querySelectorAll('div[role="option"], span');
                      for (const el of Array.from(allElements)) {
                        if (el.textContent && el.textContent.trim() === value) {
                          (el as HTMLElement).click();
                          return true;
                        }
                      }
                      return false;
                    }, kmValue);
                    console.log(`[set-location] –†–∞–¥–∏—É—Å –≤—ã–±—Ä–∞–Ω —á–µ—Ä–µ–∑ JavaScript –ø–æ–∏—Å–∫ ${kmValue}`);
                  }
                }
              });
              console.log(`[set-location] –†–∞–¥–∏—É—Å –≤ –∫–º —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω: ${kmValue}`);
              await globalPage.waitForTimeout(1000);
            } else {
              console.log(`[set-location] –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Ä–∞–¥–∏—É—Å–∞ –≤ –∫–º –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É ${kmRadiusSelector}`);
              
              // –ü—Ä–æ–±—É–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
              if (globalPage) {
                const textSelector = await globalPage.locator(`text=${kmValue}`).first();
                if (await textSelector.count() > 0) {
                  await textSelector.click();
                  console.log(`[set-location] –†–∞–¥–∏—É—Å –≤—ã–±—Ä–∞–Ω —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä ${kmValue}`);
                }
              }
            }
          }
        } catch (kmError) {
          console.log(`[set-location] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–¥–∏—É—Å–∞ –≤ –∫–º: ${kmError}`);
        }
      }
      
      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–º–µ–Ω–∏—Ç—å" —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
      let applyButton = await globalPage.$('div[role="button"]:has-text("–ü—Ä–∏–º–µ–Ω–∏—Ç—å"), button:has-text("–ü—Ä–∏–º–µ–Ω–∏—Ç—å")');
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –ø—Ä–æ–±—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ Playwright –ø—Ä–∏–º–µ—Ä–∞
      if (!applyButton) {
        applyButton = await globalPage.$('.xjp7ctv .x1i10hfl > .x1ja2u2z');
        if (applyButton) {
          console.log('[set-location] applyButton –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ Playwright –ø—Ä–∏–º–µ—Ä–∞');
        }
      }
      
      if (applyButton) {
        console.log('[set-location] applyButton –Ω–∞–π–¥–µ–Ω, –∫–ª–∏–∫–∞—é');
        try {
          await applyButton.evaluate((el: HTMLElement) => el.click());
          await globalPage.waitForTimeout(1200);
          console.log('[set-location] –∫–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ JS');
        } catch (e) {
          try {
            await applyButton.click();
            await globalPage.waitForTimeout(1200);
            console.log('[set-location] –∫–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫');
          } catch (clickError) {
            console.log(`[set-location] –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü—Ä–∏–º–µ–Ω–∏—Ç—å: ${clickError}`);
            
            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            const recovered = await handleCriticalError('set-location-apply-button', clickError);
            if (!recovered) {
              return res.status(500).json({
                success: false,
                error: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: ${clickError}`,
                status: "browser_restart_failed"
              });
            }
          }
        }
      } else {
        console.log('[set-location] applyButton –ù–ï –Ω–∞–π–¥–µ–Ω');
      }
      console.log('[set-location] done');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      currentAppState.location = city;
      currentAppState.radius = radius;
      
      return res.json({
        success: true,
        message: `–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${city}${radius ? ', —Ä–∞–¥–∏—É—Å ' + radius + ' miles' : ''}`,
        status: "completed",
        applied: {
          city: city,
          radius: radius || null
        }
      });
    } else {
      console.log('[set-location] cityBlock –ù–ï –Ω–∞–π–¥–µ–Ω');
      return res.status(404).json({
        success: false,
        error: '–ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        status: "not_found"
      });
    }
  } catch (error) {
    console.log('[set-location] ERROR', error);
    return res.status(500).json({
      success: false,
      error: `–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${error}`,
      status: "failed"
    });
  }
}
async function handleSetYearFilter(req: Request, res: Response): Promise<Response> {
  const { minYear, maxYear } = req.body;
  if ((minYear === undefined || minYear === null) && (maxYear === undefined || maxYear === null)) {
    return res.status(400).json({
      success: false,
      error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: minYear –∏–ª–∏ maxYear"
    });
  }
  
  console.log(`–§–∏–ª—å—Ç—Ä –≥–æ–¥–∞: –º–∏–Ω–∏–º—É–º ${minYear || '-'}, –º–∞–∫—Å–∏–º—É–º ${maxYear || '-'} (–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)`);
  
  updateStatus({ 
    yearFilterNotFound: true,
    minYear: minYear !== undefined && minYear > 0 ? minYear : undefined,
    maxYear: maxYear !== undefined && maxYear > 0 ? maxYear : undefined
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≥–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  currentAppState.minYear = minYear !== undefined && minYear > 0 ? minYear : undefined;
  currentAppState.maxYear = maxYear !== undefined && maxYear > 0 ? maxYear : undefined;
  
  return res.json({
    success: true,
    message: `–§–∏–ª—å—Ç—Ä –≥–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –º–∏–Ω=${minYear || '-'}, –º–∞–∫—Å=${maxYear || '-'}`,
    status: "completed",
    applied: {
      minYear: minYear !== undefined && minYear > 0 ? minYear : null,
      maxYear: maxYear !== undefined && maxYear > 0 ? maxYear : null
    }
  });
}
async function handleSetAgeFilter(req: Request, res: Response): Promise<Response> {
  const { maxAgeMinutes } = req.body;
  if (maxAgeMinutes === undefined || maxAgeMinutes === null || isNaN(Number(maxAgeMinutes)) || Number(maxAgeMinutes) <= 0) {
    return res.status(400).json({ success: false, error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ maxAgeMinutes' });
  }
  currentAppState.maxAgeMinutes = Number(maxAgeMinutes);
  return res.json({ success: true, applied: { maxAgeMinutes: currentAppState.maxAgeMinutes } });
}

function pruneImageCache() {
  if (imageCache.size > MAX_IMAGE_CACHE) {
    const excess = imageCache.size - MAX_IMAGE_CACHE;
    const keys = Array.from(imageCache.keys()).slice(0, excess);
    for (const k of keys) imageCache.delete(k);
    console.log(`pruneImageCache trimmed to ${imageCache.size}`);
  }
}

async function clearImages(): Promise<void> {
  try {
    const imgDir = path.join(process.cwd(), 'api', 'src', 'img');
    if (!fs.existsSync(imgDir)) return;
    const files = fs.readdirSync(imgDir);
    const threshold = Date.now() - 30 * 60 * 1000;
    for (const f of files) {
      const filePath = path.join(imgDir, f);
      try {
        const st = fs.statSync(filePath);
        if (st.mtime.getTime() < threshold) fs.unlinkSync(filePath);
      } catch {}
    }
  } catch (e) {
    console.error('clearImages error', e);
  }
}

async function handleClearImageCache(req: Request, res: Response): Promise<Response> {
  try {
    imageCache.clear();
    await clearImages();
    return res.json({ success: true, cleared: true });
  } catch (error) {
    return res.status(500).json({ success: false, error: String(error) });
  }
}

async function geocodeCity(query: string): Promise<{ success: boolean; lat?: number; lon?: number; name?: string; error?: string }> {
  try {
    if (!query || typeof query !== 'string') {
      return { success: false, error: 'invalid_query' };
    }

    const lower = query.toLowerCase();
    const cached = geoCache.get(lower);
    if (cached && Date.now() - cached.timestamp < 24 * 60 * 60 * 1000) {
      return { success: true, lat: cached.lat, lon: cached.lon, name: cached.name };
    }

    const url = 'https://nominatim.openstreetmap.org/search';
    const resp = await axios.get(url, {
      params: { q: query, format: 'json', limit: 1 },
      headers: { 'User-Agent': 'FreelanceProj/1.0' },
      timeout: 8000
    });

    const arr = Array.isArray(resp.data) ? resp.data : [];
    if (!arr.length) {
      return { success: false, error: 'not_found' };
    }

    const loc = arr[0];
    const lat = parseFloat(loc.lat);
    const lon = parseFloat(loc.lon);
    const name = loc.display_name || query;
    geoCache.set(lower, { lat, lon, name, timestamp: Date.now() });
    if (geoCache.size > 1000) {
      const keys = Array.from(geoCache.keys()).slice(0, geoCache.size - 1000);
      keys.forEach(k => geoCache.delete(k));
    }
    return { success: true, lat, lon, name };
  } catch (err) {
    console.error('[geocodeCity]', err);
    return { success: false, error: 'network' };
  }
}

async function handleGeocodeCity(req: Request, res: Response): Promise<Response> {
  const { city } = req.body;
  if (!city || typeof city !== 'string') {
    return res.status(400).json({ success: false, error: 'city_required' });
  }
  const result = await geocodeCity(city);
  if (result.success) {
    return res.json({ success: true, lat: result.lat, lon: result.lon, name: result.name });
  }
  return res.json({ success: false, error: result.error || 'unknown' });
}

async function downloadImage(url: string, filePath: string): Promise<void> {
  const response = await axios.get(url, { responseType: 'stream', timeout: 15000 });
  return new Promise((resolve, reject) => {
    const writer = fs.createWriteStream(filePath);
    response.data.pipe(writer);
    let finished = false;
    const finish = (err?: any) => {
      if (finished) return;
      finished = true;
      if (err) reject(err);
      else resolve();
    };
    writer.on('finish', () => finish());
    writer.on('error', (err: any) => finish(err));
    response.data.on('error', (err: any) => finish(err));
  });
}

openFacebookMarketplace().catch(error => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–æ—á–∫–∞:', error);
  updateStatus({ active: false, stage: 'critical_error' });
  process.exit(1);
});  
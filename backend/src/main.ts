import { Bot, Context, session, Keyboard, InlineKeyboard } from 'grammy'
import { FileAdapter } from '@grammyjs/storage-file'
import axios from 'axios'
import * as dotenv from 'dotenv'
import * as path from 'path'
import Database from 'better-sqlite3'
import fs from 'fs'

async function checkApiStatus(apiUrl: string): Promise<boolean> {
  try {
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –ø–æ –∞–¥—Ä–µ—Å—É ${apiUrl}/status...`)
    const response = await axios.get(`${apiUrl}/status`)
    return response.status === 200 && response.data && response.data.stage
  } catch (error) {
    console.error(`API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error}`)
    return false
  }
}

async function tryRestartApiServer(): Promise<boolean> {
  console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...');
  try {
    const possibleApiPaths = [
      path.resolve(__dirname, '../../api/dist/main.js'),
      path.resolve(__dirname, '../api/dist/main.js'),
      path.resolve(__dirname, '../../api/src/main.js'),
      path.join(process.cwd(), 'api/dist/main.js'),
      path.join(process.cwd(), 'api/src/main.js')
    ];
    
    let apiPath = '';
    for (const p of possibleApiPaths) {
      if (fs.existsSync(p)) {
        apiPath = p;
        console.log(`–ù–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ API —Å–µ—Ä–≤–µ—Ä—É: ${apiPath}`);
        break;
      }
    }
    
    if (!apiPath) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ API —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞');
      return false;
    }
    
    try {
      const checkProcess = require('child_process')
        .execSync('ps aux | grep "[n]ode.*api.*main.js"', { encoding: 'utf8' });
      
      if (checkProcess && checkProcess.length > 0) {
        console.log('API —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ...');
        require('child_process')
          .execSync('pkill -f "node.*api.*main.js"', { encoding: 'utf8' });
        console.log('API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }
    } catch (e) {
    }
    
    console.log(`–ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä: ${apiPath}`);
    const nodeProcess = require('child_process').spawn(
      'node', 
      [apiPath],
      { 
        detached: true, 
        stdio: 'ignore',
        cwd: path.dirname(apiPath)
      }
    );
    
    nodeProcess.unref();
    
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    const apiUrl = `http://localhost:3562`;
    const available = await checkApiStatus(apiUrl);
    if (available) {
      console.log(`API —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3562`);
      return true;
    }
    
    console.error('API —Å–µ—Ä–≤–µ—Ä –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –æ–Ω –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
    return false;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä:', error);
    return false;
  }
}

async function withRetry<T>(
  fn: () => Promise<T>, 
  retries: number = 2, 
  delay: number = 1000
): Promise<T> {
  try {
    return await fn()
  } catch (error: any) {
    if (retries <= 0) {
      throw error
    }
    
    console.log(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error.message || error}. ` + 
      `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ (${retries} –æ—Å—Ç–∞–ª–æ—Å—å)...`
    );
    
    await new Promise(resolve => setTimeout(resolve, delay));
    return withRetry(fn, retries - 1, delay * 1.5);
  }
}

dotenv.config({ path: path.resolve(__dirname, '../../config/.env') })

const BOT_TOKEN = process.env.TG_BOT_TOKEN || ''

function getApiPort(): number {
  const defaultPort = 3562;
  const portFilePath = path.join(process.cwd(), 'api_port.txt');
  
  try {
    if (fs.existsSync(portFilePath)) {
      const content = fs.readFileSync(portFilePath, 'utf8').trim();
      const port = parseInt(content);
      if (!isNaN(port) && port > 0) {
        console.log(`–ù–∞–π–¥–µ–Ω –ø–æ—Ä—Ç API –≤ —Ñ–∞–π–ª–µ: ${port}`);
        return port;
      }
    }
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ—Ä—Ç–∞:`, err);
  }

  console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${defaultPort}`);
  return defaultPort;
}

const API_PORT = getApiPort();
const API_URL = `http://localhost:${API_PORT}`;
console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º API URL: ${API_URL}`);

interface FilterState {
<<<<<<< HEAD
  step: null | 'query' | 'city' | 'radius' | 'minPrice' | 'maxPrice' | 'minYear' | 'maxYear' | 'timeFilter'
=======
  step: null | 'query' | 'city' | 'radius' | 'minPrice' | 'maxPrice' | 'minYear' | 'maxYear' | 'ageLimit'
>>>>>>> fbca6f0 (–≤—É–≤–∞)
  query?: string
  city?: string
  radius?: number
  minPrice?: number
  maxPrice?: number
  minYear?: number
  maxYear?: number
<<<<<<< HEAD
  timeFilter?: string
=======
  maxAgeMinutes?: number
>>>>>>> fbca6f0 (–≤—É–≤–∞)
}

interface SessionData {
  filters: FilterState
  monitoring: boolean
  sent: Set<string>
  lastLogMessageId?: number
  awaitingClearConfirmation?: boolean
  consecutiveEmptyScans?: number
  lastStatusMessageId?: number
}

function initialSession(): SessionData {
  return {
    filters: { step: null },
    monitoring: false,
    sent: new Set(),
    lastLogMessageId: undefined,
    consecutiveEmptyScans: 0,
    lastStatusMessageId: undefined
  }
}

type MyContext = Context & { session: SessionData }

const bot = new Bot<MyContext>(BOT_TOKEN)
bot.use(session({ initial: initialSession, storage: new FileAdapter({ dirName: './sessions' }) }))

bot.use(async (ctx: MyContext, next: () => Promise<void>) => {
  if (!ctx.session.filters || typeof ctx.session.filters !== 'object') ctx.session.filters = { step: null }
  if (typeof ctx.session.monitoring !== 'boolean') ctx.session.monitoring = false
  if (!ctx.session.sent || !(ctx.session.sent instanceof Set)) ctx.session.sent = new Set()
  if (typeof ctx.session.lastLogMessageId !== 'number') ctx.session.lastLogMessageId = undefined
  if (typeof ctx.session.awaitingClearConfirmation !== 'boolean') ctx.session.awaitingClearConfirmation = false
  if (typeof ctx.session.consecutiveEmptyScans !== 'number') ctx.session.consecutiveEmptyScans = 0
  if (typeof ctx.session.filters.maxAgeMinutes !== 'number') ctx.session.filters.maxAgeMinutes = undefined
  if (typeof ctx.session.lastStatusMessageId !== 'number') ctx.session.lastStatusMessageId = undefined
  await next()
})

const mainMenu = new Keyboard()
  .text('üõ† –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã').text('üîé –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥').row()
  .text('‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å').text('üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã').row()
  .text('‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞').text('üîÑ –ü–µ—Ä–µ-–Ω–∞—Å—Ç—Ä–æ–π–∫–∞').row()
  .resized()

const db = new Database(path.resolve(__dirname, '../../sent_items.db'))

const ALL_KNOWN_URLS = new Set<string>();

try {
  const tableExists = db.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name='sent_items'").get()
  
  if (!tableExists) {
    console.log('–°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É sent_items')
    db.exec(`CREATE TABLE sent_items (itemUrl TEXT PRIMARY KEY, timestamp INTEGER)`)
    db.exec(`CREATE INDEX IF NOT EXISTS idx_sent_items_url ON sent_items(itemUrl)`)
    db.exec(`CREATE INDEX IF NOT EXISTS idx_sent_items_timestamp ON sent_items(timestamp)`)
  } else {
    try {
      const testCol = db.prepare('SELECT itemUrl FROM sent_items LIMIT 1')
      testCol.get()
      
      try {
        const testTimestamp = db.prepare('SELECT timestamp FROM sent_items LIMIT 1')
        testTimestamp.get()
        console.log('–¢–∞–±–ª–∏—Ü–∞ sent_items —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ itemUrl –∏ timestamp')
      } catch (e) {
        console.log('–î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É timestamp –≤ —Ç–∞–±–ª–∏—Ü—É sent_items')
        db.exec(`ALTER TABLE sent_items ADD COLUMN timestamp INTEGER DEFAULT 0`)
        db.exec(`CREATE INDEX IF NOT EXISTS idx_sent_items_timestamp ON sent_items(timestamp)`)
      }
      
      console.log('–¢–∞–±–ª–∏—Ü–∞ sent_items —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –∫–æ–ª–æ–Ω–∫–æ–π itemUrl')
    } catch (e) {
      console.log('–î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É itemUrl –≤ —Ç–∞–±–ª–∏—Ü—É sent_items')
      db.exec(`ALTER TABLE sent_items ADD COLUMN itemUrl TEXT`)
      db.exec(`CREATE INDEX IF NOT EXISTS idx_sent_items_url ON sent_items(itemUrl)`)
      
      console.log('–î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É timestamp –≤ —Ç–∞–±–ª–∏—Ü—É sent_items')
      db.exec(`ALTER TABLE sent_items ADD COLUMN timestamp INTEGER DEFAULT 0`)
      db.exec(`CREATE INDEX IF NOT EXISTS idx_sent_items_timestamp ON sent_items(timestamp)`)
    }
  }
  
  function cleanupOldRecords() {
    try {
      const oneDayAgo = Date.now() - (24 * 60 * 60 * 1000);
      const deletedCount = db.prepare('DELETE FROM sent_items WHERE timestamp > 0 AND timestamp < ?').run(oneDayAgo);
      console.log(`–£–¥–∞–ª–µ–Ω–æ ${deletedCount?.changes || 0} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã sent_items`);
      
      const deletedLegacyCount = db.prepare('DELETE FROM sent_items WHERE timestamp IS NULL OR timestamp = 0 LIMIT 1000').run();
      if (deletedLegacyCount?.changes && deletedLegacyCount.changes > 0) {
        console.log(`–£–¥–∞–ª–µ–Ω–æ ${deletedLegacyCount.changes} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –±–µ–∑ timestamp`);
      }
      
      if ((deletedCount?.changes || 0) > 1000) {
        console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–∞–∫—É—É–º –ë–î –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞...');
        db.exec('VACUUM');
        console.log('–í–∞–∫—É—É–º –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π:', error);
    }
  }

  function loadAllUrlsToCache() {
    try {
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö URL –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à...');
      const allUrls = db.prepare('SELECT itemUrl FROM sent_items WHERE itemUrl IS NOT NULL').all();
      let count = 0;
      for (const row of allUrls as any[]) {
        if (row && row.itemUrl) {
          ALL_KNOWN_URLS.add(row.itemUrl);
          count++;
        }
      }
      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${count} URL –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ URL –≤ –∫—ç—à:', error);
    }
  }

  loadAllUrlsToCache();

  cleanupOldRecords();
  
  const CLEANUP_INTERVAL = 60 * 60 * 1000; 
  setInterval(cleanupOldRecords, CLEANUP_INTERVAL);
  
} catch (e) {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', e)
}


async function startFilterWizard(ctx: MyContext) {
  ctx.session.filters = { step: 'query' }
  
  const apiAvailable = await checkApiStatus(API_URL);
  if (!apiAvailable) {
    await ctx.reply('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.', { reply_markup: mainMenu });
    return;
  }
  
  try {
    console.log('[startFilterWizard] –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Marketplace...');
    const navigateResult = await withRetry(() => axios.post(`${API_URL}/navigate-to-marketplace`, {}), 3, 2000);
    if (navigateResult.data && navigateResult.data.success) {
      console.log('[startFilterWizard] –£—Å–ø–µ—à–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
    } else {
      console.log('[startFilterWizard] –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É:', navigateResult.data?.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  } catch (navError) {
    console.error('[startFilterWizard] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:', navError);
  }
  
  await ctx.reply('–í–≤–µ–¥–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:');
}

bot.command('start', async (ctx: MyContext) => {
  await ctx.reply(
    'üëã –ü—Ä–∏–≤–µ—Ç!\n\n' +
    'ü§ñ bot by @DerxKiwi\n\n' +
    'üî• ENTERPRISE-–£–†–û–í–ï–ù–¨:\n' +
    '‚Ä¢ TypeScript + Firefox Playwright\n' +
    '‚Ä¢ –ü–∞—Ä—Å–µ—Ä—ã –Ω–∞–ø–∏—Å–∞–Ω—ã —Å –Ω—É–ª—è\n' +
    '‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ FB Marketplace\n' +
    '‚Ä¢ 5000‚ÇΩ+ –Ω–∞ –∞–Ω—Ç–∏–∫–∞–ø—á–∏\n' +
    '‚Ä¢ Solo —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n\n' +
    '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Facebook Marketplace –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ç–≤–æ–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.\n\n' +
    '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', 
    { reply_markup: mainMenu }
  )
})

async function performFullClear(ctx: MyContext) {
  const oldCacheSize = ALL_KNOWN_URLS.size;
  const sentSize = ctx.session.sent.size;
  
  ALL_KNOWN_URLS.clear();
  ctx.session.sent = new Set();
  ctx.session.consecutiveEmptyScans = 0;
  ctx.session.lastStatusMessageId = undefined;
  
  console.log(`[–ö—ç—à] –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à (–±—ã–ª–æ ${oldCacheSize} –∑–∞–ø–∏—Å–µ–π), —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±—ã–ª–æ ${sentSize} –∑–∞–ø–∏—Å–µ–π)`);
  
  try {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö URL –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à...');
    const allUrls = db.prepare('SELECT itemUrl FROM sent_items WHERE itemUrl IS NOT NULL').all();
    let count = 0;
    for (const row of allUrls as any[]) {
      if (row && row.itemUrl) {
        ALL_KNOWN_URLS.add(row.itemUrl);
        count++;
      }
    }
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${count} URL –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à`);
    await ctx.reply(`‚úì`, { reply_markup: mainMenu });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ URL –≤ –∫—ç—à:', error);
    await ctx.reply(`‚ùå –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.`, { reply_markup: mainMenu });
  }
}

bot.command('clear', async (ctx: MyContext) => {
  ctx.session.awaitingClearConfirmation = true;
  await ctx.reply('üîê –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ: yes\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ –¥—Ä—É–≥–æ–µ.');
})

bot.hears('üõ† –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', startFilterWizard)
bot.hears('üîÑ –ü–µ—Ä–µ-–Ω–∞—Å—Ç—Ä–æ–π–∫–∞', startFilterWizard)

bot.on('message:text', async (ctx: MyContext, next: () => Promise<void>) => {
  if (!ctx.message?.text) return next();
  
  if (ctx.session.awaitingClearConfirmation) {
    ctx.session.awaitingClearConfirmation = false;
    if (ctx.message.text.toLowerCase().trim() === 'yes') {
      await performFullClear(ctx);
    } else {
      await ctx.reply('‚úì', { reply_markup: mainMenu });
    }
    return;
  }
  
  const { step } = ctx.session.filters
  if (step === 'query') {
    ctx.session.filters.query = ctx.message.text
    ctx.session.filters.step = 'city'
    await axios.post(`${API_URL}/search`, { query: ctx.session.filters.query })
    await ctx.reply('–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞:')
    return
  }
  if (step === 'city') {
    ctx.session.filters.city = ctx.message.text
    ctx.session.filters.step = 'radius'
    const ikb = new InlineKeyboard()
      .text('2 –º–∏–ª—å', 'radius:2').text('5 –º–∏–ª—å', 'radius:5').row()
      .text('10 –º–∏–ª—å', 'radius:10').text('20 –º–∏–ª—å', 'radius:20').row()
      .text('40 –º–∏–ª—å', 'radius:40').text('60 –º–∏–ª—å', 'radius:60').row()
      .text('80 –º–∏–ª—å', 'radius:80').text('100 –º–∏–ª—å', 'radius:100').row()
      .text('250 –º–∏–ª—å', 'radius:250').text('500 –º–∏–ª—å', 'radius:500').row()
      .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')
    await ctx.reply('–í—ã–±–µ—Ä–∏ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:', { reply_markup: ikb })
    return
  }
  if (step === 'minPrice') {
    const min = Number(ctx.message.text)
    if (isNaN(min)) return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ!')
    ctx.session.filters.minPrice = min
    ctx.session.filters.step = 'maxPrice'
    await ctx.reply('–í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–∏–ª–∏ 0 –µ—Å–ª–∏ —Ñ—Ä–∏ —Ü–µ–Ω–∞):')
    return
  }
  if (step === 'maxPrice') {
    const max = Number(ctx.message.text)
    if (isNaN(max)) return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ!')
    ctx.session.filters.maxPrice = max
    
    // –î–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –≥–æ–¥ (–Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—à–∏–Ω)
    ctx.session.filters.step = 'minYear'
    await ctx.reply('–í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ (–∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π):')
    return
  }
  if (step === 'minYear') {
    const minYear = Number(ctx.message.text)
    if (isNaN(minYear)) return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≥–æ–¥ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!')
    ctx.session.filters.minYear = minYear === 0 ? undefined : minYear
    ctx.session.filters.step = 'maxYear'
    await ctx.reply('–í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ (–∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π):')
    return
  }
  if (step === 'maxYear') {
    const maxYear = Number(ctx.message.text)
    if (isNaN(maxYear)) return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≥–æ–¥ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!')
    ctx.session.filters.maxYear = maxYear === 0 ? undefined : maxYear
<<<<<<< HEAD
    ctx.session.filters.step = 'timeFilter'
    
    const ikb = new InlineKeyboard()
      .text('1 –º–∏–Ω—É—Ç–∞', 'time:1min').text('1 —á–∞—Å', 'time:1hour').row()
      .text('4 —á–∞—Å–∞', 'time:4hours').text('12 —á–∞—Å–æ–≤', 'time:12hours').row()
      .text('1 –¥–µ–Ω—å', 'time:1day').text('1 –Ω–µ–¥–µ–ª—è', 'time:1week').row()
      .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')
    
    await ctx.reply('–£–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–∑–∞–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:', { reply_markup: ikb })
    return
  }
  if (step === 'timeFilter') {
    ctx.session.filters.timeFilter = ctx.message.text
    ctx.session.filters.step = null
    try {
      await axios.post(`${API_URL}/set-location`, { city: ctx.session.filters.city, radius: ctx.session.filters.radius })
      await axios.post(`${API_URL}/set-price-filter`, { minPrice: ctx.session.filters.minPrice, maxPrice: ctx.session.filters.maxPrice })
      if ((ctx.session.filters.minYear !== undefined && ctx.session.filters.minYear > 0) || 
          (ctx.session.filters.maxYear !== undefined && ctx.session.filters.maxYear > 0)) {
        try {
          await axios.post(`${API_URL}/set-year-filter`, { 
            minYear: (ctx.session.filters.minYear !== undefined && ctx.session.filters.minYear > 0) ? ctx.session.filters.minYear : null, 
            maxYear: (ctx.session.filters.maxYear !== undefined && ctx.session.filters.maxYear > 0) ? ctx.session.filters.maxYear : null 
          });
        } catch (yearError: any) {
          if (yearError.response && yearError.response.status === 404) {
            console.log('–§–∏–ª—å—Ç—Ä –≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≥–æ–¥—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
          } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≥–æ–¥–∞:', yearError.message || yearError);
          }
        }
      }
      await ctx.reply('‚úÖ –§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.', { reply_markup: mainMenu })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error)
      await ctx.reply('‚ùå –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã. –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.', { reply_markup: mainMenu })
    }
=======
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    ctx.session.filters.step = 'ageLimit'
    const ageKb = new InlineKeyboard()
      .text('1 –º–∏–Ω', 'age:1').text('1 —á–∞—Å', 'age:60').row()
      .text('4 —á–∞—Å–∞', 'age:240').text('12 —á–∞—Å–æ–≤', 'age:720').row()
      .text('–¥–µ–Ω—å', 'age:1440').text('–Ω–µ–¥–µ–ª—è', 'age:10080').row()
      .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')
    await ctx.reply('–í—ã–±–µ—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', { reply_markup: ageKb })
>>>>>>> fbca6f0 (–≤—É–≤–∞)
    return
  }
  await next()
})

bot.callbackQuery(/^radius:(\d+)/, async (ctx: MyContext) => {
  if (ctx.session.filters.step !== 'radius') return ctx.answerCallbackQuery()
  if (!ctx.match) return ctx.answerCallbackQuery()
  ctx.session.filters.radius = Number(ctx.match[1])
  ctx.session.filters.step = 'minPrice'
  await ctx.editMessageText(`–†–∞–¥–∏—É—Å –≤—ã–±—Ä–∞–Ω: ${ctx.session.filters.radius} –º–∏–ª—å`)
  await ctx.reply('–í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–∏–ª–∏ 0 –µ—Å–ª–∏ —Ñ—Ä–∏ —Ü–µ–Ω–∞):')
})

bot.callbackQuery(/^time:(\w+)/, async (ctx: MyContext) => {
  if (ctx.session.filters.step !== 'timeFilter') return ctx.answerCallbackQuery()
  if (!ctx.match) return ctx.answerCallbackQuery()
  
  const timeValue = ctx.match[1]
  ctx.session.filters.timeFilter = timeValue
  ctx.session.filters.step = null
  
  let displayText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä'
  
  switch (timeValue) {
    case '1min':
      displayText = '1 –º–∏–Ω—É—Ç–∞'
      break
    case '1hour':
      displayText = '1 —á–∞—Å'
      break
    case '4hours':
      displayText = '4 —á–∞—Å–∞'
      break
    case '12hours':
      displayText = '12 —á–∞—Å–æ–≤'
      break
    case '1day':
      displayText = '1 –¥–µ–Ω—å'
      break
    case '1week':
      displayText = '1 –Ω–µ–¥–µ–ª—è'
      break
  }
  
  await ctx.editMessageText(`–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä –≤—ã–±—Ä–∞–Ω: ${displayText}`)
  
  try {
    await axios.post(`${API_URL}/set-location`, { city: ctx.session.filters.city, radius: ctx.session.filters.radius })
    await axios.post(`${API_URL}/set-price-filter`, { minPrice: ctx.session.filters.minPrice, maxPrice: ctx.session.filters.maxPrice })
    if ((ctx.session.filters.minYear !== undefined && ctx.session.filters.minYear > 0) || 
        (ctx.session.filters.maxYear !== undefined && ctx.session.filters.maxYear > 0)) {
      try {
        await axios.post(`${API_URL}/set-year-filter`, { 
          minYear: (ctx.session.filters.minYear !== undefined && ctx.session.filters.minYear > 0) ? ctx.session.filters.minYear : null, 
          maxYear: (ctx.session.filters.maxYear !== undefined && ctx.session.filters.maxYear > 0) ? ctx.session.filters.maxYear : null 
        });
      } catch (yearError: any) {
        if (yearError.response && yearError.response.status === 404) {
          console.log('–§–∏–ª—å—Ç—Ä –≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≥–æ–¥—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
        } else {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≥–æ–¥–∞:', yearError.message || yearError);
        }
      }
    }
    await ctx.reply('‚úÖ –§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.', { reply_markup: mainMenu })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error)
    await ctx.reply('‚ùå –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã. –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.', { reply_markup: mainMenu })
  }
})

bot.callbackQuery('cancel', async (ctx: MyContext) => {
  ctx.session.filters = { step: null }
  await ctx.editMessageText('‚úì')
  await ctx.reply('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: mainMenu })
})

bot.callbackQuery(/^age:(\d+)/, async (ctx: MyContext) => {
  if (ctx.session.filters.step !== 'ageLimit') return ctx.answerCallbackQuery()
  if (!ctx.match) return ctx.answerCallbackQuery()
  ctx.session.filters.maxAgeMinutes = Number(ctx.match[1])
  ctx.session.filters.step = null
  await ctx.editMessageText(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: ${ctx.session.filters.maxAgeMinutes} –º–∏–Ω.`)
  try {
    await axios.post(`${API_URL}/set-location`, { city: ctx.session.filters.city, radius: ctx.session.filters.radius })
    await axios.post(`${API_URL}/set-price-filter`, { minPrice: ctx.session.filters.minPrice, maxPrice: ctx.session.filters.maxPrice })
    if ((ctx.session.filters.minYear !== undefined && ctx.session.filters.minYear > 0) || 
        (ctx.session.filters.maxYear !== undefined && ctx.session.filters.maxYear > 0)) {
      await axios.post(`${API_URL}/set-year-filter`, { 
        minYear: ctx.session.filters.minYear ?? null,
        maxYear: ctx.session.filters.maxYear ?? null
      }).catch(() => {})
    }
    await axios.post(`${API_URL}/set-age-filter`, { maxAgeMinutes: ctx.session.filters.maxAgeMinutes })
    await ctx.reply('‚úÖ –§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.', { reply_markup: mainMenu })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error)
    await ctx.reply('‚ùå –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.', { reply_markup: mainMenu })
  }
})

const monitoringIntervals = new Map<number, NodeJS.Timeout>();

bot.hears('üîé –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', async (ctx: MyContext) => {
  const f = ctx.session.filters
  if (!f.query || !f.city || !f.radius) return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π —Ñ–∏–ª—å—Ç—Ä—ã!', { reply_markup: mainMenu })
  if (ctx.session.monitoring) return ctx.reply('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!', { reply_markup: mainMenu })
  
  const apiAvailable = await checkApiStatus(API_URL);
  if (!apiAvailable) {
    await ctx.reply('‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...', { reply_markup: mainMenu });
    const restarted = await tryRestartApiServer();
    if (!restarted) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä.', { reply_markup: mainMenu });
      return;
    }
  }
  
  ctx.session.consecutiveEmptyScans = 0;
  ctx.session.lastStatusMessageId = undefined;
  console.log(`[–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥] –°–±—Ä–æ—à–µ–Ω—ã —Å—á–µ—Ç—á–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∫—ç—à –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω)`);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä
  if (f.timeFilter) {
    console.log(`[–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥] –í—ã–±—Ä–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä: ${f.timeFilter}`);
  } else {
    console.log(`[–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥] –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω`);
  }
  
  try {
    await axios.post(`${API_URL}/navigate-to-marketplace`, {});
    await axios.post(`${API_URL}/search`, { query: f.query });
    await axios.post(`${API_URL}/set-location`, { city: f.city, radius: f.radius });
    await axios.post(`${API_URL}/set-price-filter`, { minPrice: f.minPrice, maxPrice: f.maxPrice });
    
    if ((f.minYear !== undefined && f.minYear > 0) || (f.maxYear !== undefined && f.maxYear > 0)) {
      try {
        await axios.post(`${API_URL}/set-year-filter`, { 
          minYear: (f.minYear !== undefined && f.minYear > 0) ? f.minYear : null,
          maxYear: (f.maxYear !== undefined && f.maxYear > 0) ? f.maxYear : null 
        });
      } catch (yearError: any) {
        console.log('–§–∏–ª—å—Ç—Ä –≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≥–æ–¥—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
      }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
    if (f.maxAgeMinutes && f.maxAgeMinutes > 0) {
      await axios.post(`${API_URL}/set-age-filter`, { maxAgeMinutes: f.maxAgeMinutes }).catch(() => {})
    }
    
    ctx.session.monitoring = true
    await sendListings(ctx)
    await ctx.reply('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!', { reply_markup: mainMenu })
    
    if (!ctx.chat) return ctx.reply('‚ùå –û—à–∏–±–∫–∞: —á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    
    if (monitoringIntervals.has(ctx.chat.id)) {
      clearInterval(monitoringIntervals.get(ctx.chat.id));
    }
    
    const chatId = ctx.chat.id;
    const intervalId = setInterval(() => {
      if (ctx.session && ctx.session.monitoring) {
        sendListings(ctx).catch(error => {
          console.error(`[–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥] –û—à–∏–±–∫–∞: ${error}`);
        });
      } else {
        clearInterval(intervalId);
        monitoringIntervals.delete(chatId);
      }
    }, 5 * 60 * 1000);
    
    monitoringIntervals.set(chatId, intervalId);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error)
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.', { reply_markup: mainMenu })
    ctx.session.monitoring = false
  }
})

function isFakeListingByPrice(item: any): boolean {
  const title = item.title?.trim() || '';
  const price = item.price?.trim() || '';
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ title –∏ price
  if (title === price) return true;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: Title –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å $ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã/–∑–∞–ø—è—Ç—ã–µ
  if (title.startsWith('$') && /^\$[\d,]+$/.test(title)) return true;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: Title –∫–æ—Ä–æ—á–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø–æ—Ö–æ–∂ –Ω–∞ —Ü–µ–Ω—É
  if (title.length < 10 && /^\$\d/.test(title)) return true;
  
  return false;
}

async function sendListings(ctx: MyContext) {
  try {
    const apiAvailable = await checkApiStatus(API_URL);
    if (!apiAvailable) {
      console.log('[sendListings] API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      ctx.session.monitoring = false;
      await ctx.reply('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.', { reply_markup: mainMenu });
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä –≤ –∑–∞–ø—Ä–æ—Å
    const timeFilter = ctx.session.filters.timeFilter;
    let apiUrl = `${API_URL}/listings?count=10`;
    
    if (timeFilter) {
      console.log(`[sendListings] –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä: ${timeFilter}`);
      apiUrl += `&timeFilter=${encodeURIComponent(timeFilter)}`;
    }
    
    const res = await axios.get(apiUrl);
    
    if (!res.data || !res.data.items) {
      console.log('[sendListings] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API');
      return
    }
    
    const items = res.data.items || []
    console.log('[sendListings] –ü–æ–ª—É—á–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', items.length)
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–µ–π–∫–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ü–µ–Ω–µ
    const filteredItems = items.filter((item: any) => {
      if (isFakeListingByPrice(item)) {
        console.log(`[sendListings] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω —Ñ–µ–π–∫: ${item.title}`);
        return false;
      }
      return true;
    });
    
    let fakeFilteredCount = items.length - filteredItems.length;
    if (fakeFilteredCount > 0) {
      console.log(`[sendListings] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${fakeFilteredCount} —Ñ–µ–π–∫–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    if (res.data.timeFilteredCount && res.data.timeFilteredCount > 0) {
      console.log(`[sendListings] API –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª ${res.data.timeFilteredCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);
    }
    
    await clearImages()
    
    const uniqueItems = [];
    let duplicatesRemoved = 0;
    
    for (const item of filteredItems as any[]) {
      const url = item.itemUrl;
      if (!url) continue;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
      if (ctx.session.sent.has(url) || ALL_KNOWN_URLS.has(url)) {
        duplicatesRemoved++;
        continue;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ URL)
      ALL_KNOWN_URLS.add(url); 
      ctx.session.sent.add(url); 
      uniqueItems.push(item);
      
      try {
        const timestamp = Date.now();
        db.prepare('INSERT OR IGNORE INTO sent_items (itemUrl, timestamp) VALUES (?, ?)').run(url, timestamp);
      } catch (insertError) {
        console.error('[sendListings] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', insertError);
      }
    }
    
    console.log(`[sendListings] –ù–æ–≤—ã—Ö: ${uniqueItems.length}, –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicatesRemoved}`);
    
    // –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if (uniqueItems.length > 0) {
      // –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      ctx.session.consecutiveEmptyScans = 0;
      ctx.session.lastStatusMessageId = undefined;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      let successText = uniqueItems.length === 1 
        ? '‚úÖ –ù–∞–π–¥–µ–Ω–æ 1 –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!' 
        : `‚úÖ –ù–∞–π–¥–µ–Ω–æ ${uniqueItems.length} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π!`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏–º–µ–Ω—è–ª–∞—Å—å
      if (res.data.timeFilteredCount && res.data.timeFilteredCount > 0) {
        successText += ` (${res.data.timeFilteredCount} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)`;
      }
      
      try {
        await ctx.reply(successText);
      } catch (error) {
        console.error('[sendListings] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ:', error);
      }
    } else {
      // –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      ctx.session.consecutiveEmptyScans = (ctx.session.consecutiveEmptyScans || 0) + 1;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
      if (ctx.session.consecutiveEmptyScans >= 3) {
        console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ 3+ –ø—É—Å—Ç—ã—Ö —Å–∫–∞–Ω–æ–≤ –ø–æ–¥—Ä—è–¥, –ø—Ä–æ–≤–µ—Ä—è—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API –∏ –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É
          const statusResponse = await axios.get(`${API_URL}/status`);
          if (statusResponse.data && statusResponse.data.stage) {
            console.log('üìä API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 —Ç–æ–≤–∞—Ä–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ Facebook');
            
            // –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ—Ñ—Ä–µ—à–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∫ –º—è–≥–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            try {
              await axios.post(`${API_URL}/refresh-page`);
              console.log('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω refresh —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
            } catch (refreshError) {
              console.log('‚ö†Ô∏è Refresh –Ω–µ –ø–æ–º–æ–≥, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –ø–æ–ª–Ω–æ–µ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ');
            }
          }
        } catch (apiError) {
          console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', apiError);
        }
      }
      
      const statusText = `üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π (—Å–∫–∞–Ω–æ–≤ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${ctx.session.consecutiveEmptyScans})`;
      
      try {
        if (ctx.session.lastStatusMessageId) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          try {
            await ctx.api.editMessageText(ctx.chat?.id!, ctx.session.lastStatusMessageId, statusText);
          } catch (editError) {
            // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            console.log('[sendListings] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–∑–¥–∞—é –Ω–æ–≤–æ–µ');
            const newMessage = await ctx.reply(statusText);
            ctx.session.lastStatusMessageId = newMessage.message_id;
          }
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
          const newMessage = await ctx.reply(statusText);
          ctx.session.lastStatusMessageId = newMessage.message_id;
        }
      } catch (error) {
        console.error('[sendListings] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        ctx.session.lastStatusMessageId = undefined;
      }
    }
    
    for (const item of uniqueItems) {
      try {
        await ctx.replyWithPhoto(item.imageUrl, {
          caption: `üí¨ <b>${item.title}</b>\nüí∏ ${item.price}\nüìç ${item.location}\n<a href="${item.itemUrl}">–û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä</a>`,
          parse_mode: 'HTML',
          reply_markup: new InlineKeyboard().url('–û—Ç–∫—Ä—ã—Ç—å', item.itemUrl)
        });
        console.log(`[sendListings] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${item.title}`);
      } catch (sendError) {
        console.error('[sendListings] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', sendError);
      }
    }
    
  } catch (e) {
    console.error('[sendListings] –û—à–∏–±–∫–∞:', e)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
    const errorString = String(e);
    if (errorString.includes('Timeout') || 
        errorString.includes('NS_BINDING_ABORTED') ||
        errorString.includes('detached') ||
        errorString.includes('Protocol error') ||
        errorString.includes('browser has disconnected')) {
      
      console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å API...');
      
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ API —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å
      try {
        const restarted = await tryRestartApiServer();
        if (restarted) {
          console.log('‚úÖ API –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
          await ctx.reply('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞. API –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.', { reply_markup: mainMenu });
          return; // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        }
      } catch (restartError) {
        console.error('[sendListings] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ API:', restartError);
      }
    }
    
    ctx.session.monitoring = false 
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.', { reply_markup: mainMenu })
  }
}

async function clearImages() {
  try {
    const imgDirs = [
      '/home/derx/–ü—Ä–æ–µ–∫—Ç—ã/freelanceproj/api/src/img',  
      path.join(process.cwd(), 'api/src/img'),
      path.join(process.cwd(), '../api/src/img'),
      path.resolve(__dirname, '../../api/src/img'),
      path.join(__dirname, '../api/src/img'),
      '/home/derx/–ü—Ä–æ–µ–∫—Ç—ã/freelanceproj/api/src/img',
      path.resolve(process.cwd(), 'api/src/img')
    ]
    
    console.log('–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç)...')
    const thirtyMinutesAgo = Date.now() - (30 * 60 * 1000);
    
    let dirCleaned = false
    for (const imgDir of imgDirs) {
      if (fs.existsSync(imgDir)) {
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${imgDir}`)
        try {
          const files = fs.readdirSync(imgDir)
          let deleted = 0
          let skipped = 0
          let duplicatesRemoved = 0
          
          const fileGroups = new Map<string, Array<{name: string, path: string, mtime: number}>>()
          
          for (const file of files) {
            if (file.endsWith('.png') || file.endsWith('.jpg') || file.endsWith('.jpeg')) {
              const filePath = path.join(imgDir, file)
              try {
                const stats = fs.statSync(filePath);
                
                if (stats.mtime.getTime() < thirtyMinutesAgo) {
                  fs.unlinkSync(filePath)
                  deleted++
                  continue
                }
                
                const productKey = file.split('_').slice(0, 2).join('_')
                if (!fileGroups.has(productKey)) {
                  fileGroups.set(productKey, [])
                }
                fileGroups.get(productKey)!.push({
                  name: file,
                  path: filePath,
                  mtime: stats.mtime.getTime()
                })
                
                skipped++
              } catch (e) {
                const errorMsg = e instanceof Error ? e.message : String(e)
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${filePath}: ${errorMsg}`)
              }
            }
          }
          
          for (const [productKey, group] of fileGroups.entries()) {
            if (group.length > 1) {
              group.sort((a, b) => b.mtime - a.mtime)
              for (let i = 1; i < group.length; i++) {
                try {
                  fs.unlinkSync(group[i].path)
                  duplicatesRemoved++
                  // –°–∫—Ä—ã–≤–∞–µ–º —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                  // console.log(`–£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: ${group[i].name}`)
                } catch (e) {
                  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ ${group[i].path}: ${e}`)
                }
              }
            }
          }
          
          if (deleted > 0 || skipped > 0 || duplicatesRemoved > 0) {
            console.log(`–£–¥–∞–ª–µ–Ω–æ ${deleted} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤, ${duplicatesRemoved} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ ${skipped - duplicatesRemoved} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤ ${imgDir}`)
          }
          dirCleaned = true
        } catch (e) {
          const errorMsg = e instanceof Error ? e.message : String(e)
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${imgDir}: ${errorMsg}`)
        }
      }
    }
    
    if (!dirCleaned) {
      console.error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏! –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –ø—É—Ç–∏:', imgDirs)
    }
  } catch (e) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', e)
  }
}

bot.hears('‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', async (ctx: MyContext) => {
  ctx.session.monitoring = false
  ctx.session.consecutiveEmptyScans = 0
  ctx.session.lastStatusMessageId = undefined
  
  if (!ctx.chat) return ctx.reply('‚ùå –û—à–∏–±–∫–∞: —á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
  if (monitoringIntervals.has(ctx.chat.id)) {
    clearInterval(monitoringIntervals.get(ctx.chat.id));
    monitoringIntervals.delete(ctx.chat.id);
    console.log(`[–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —á–∞—Ç–∞ ${ctx.chat.id}`);
  }
  
  try {
    console.log('[–û—Å—Ç–∞–Ω–æ–≤–∫–∞] –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Marketplace...');
    const navigateResult = await withRetry(() => axios.post(`${API_URL}/navigate-to-marketplace`, {}), 3, 2000);
    if (navigateResult.data && navigateResult.data.success) {
      console.log('[–û—Å—Ç–∞–Ω–æ–≤–∫–∞] –£—Å–ø–µ—à–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
    } else {
      console.log('[–û—Å—Ç–∞–Ω–æ–≤–∫–∞] –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É:', navigateResult.data?.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  } catch (navError) {
    console.error('[–û—Å—Ç–∞–Ω–æ–≤–∫–∞] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:', navError);
  }
  
  await clearImages()
  
  const cacheSize = ALL_KNOWN_URLS.size
  const sessionCacheSize = ctx.session.sent.size
  console.log(`[–û—Å—Ç–∞–Ω–æ–≤–∫–∞] –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à: ${cacheSize} URL, —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${sessionCacheSize} URL (—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)`)
  
  await ctx.reply('‚úì', { reply_markup: mainMenu })
})

bot.hears('üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã', async (ctx: MyContext) => {
  const f = ctx.session.filters
  if (!f.query) return ctx.reply('–§–∏–ª—å—Ç—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.', { reply_markup: mainMenu })
  
  let filterText = `–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${f.query}\n–ì–æ—Ä–æ–¥: ${f.city}\n–†–∞–¥–∏—É—Å: ${f.radius} –º–∏–ª—å\n–¶–µ–Ω–∞: ${f.minPrice}‚Äì${f.maxPrice}`;
  
  if ((f.minYear !== undefined && f.minYear > 0) || (f.maxYear !== undefined && f.maxYear > 0)) {
    const minYearStr = f.minYear !== undefined && f.minYear > 0 ? f.minYear.toString() : '-';
    const maxYearStr = f.maxYear !== undefined && f.maxYear > 0 ? f.maxYear.toString() : '-';
    filterText += `\n–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: ${minYearStr}‚Äì${maxYearStr}`;
  }
  
  if (f.timeFilter) {
    let timeFilterDisplay = "–ù–µ —É–∫–∞–∑–∞–Ω";
    
    switch (f.timeFilter) {
      case '1min':
        timeFilterDisplay = '1 –º–∏–Ω—É—Ç–∞';
        break;
      case '1hour':
        timeFilterDisplay = '1 —á–∞—Å';
        break;
      case '4hours':
        timeFilterDisplay = '4 —á–∞—Å–∞';
        break;
      case '12hours':
        timeFilterDisplay = '12 —á–∞—Å–æ–≤';
        break;
      case '1day':
        timeFilterDisplay = '1 –¥–µ–Ω—å';
        break;
      case '1week':
        timeFilterDisplay = '1 –Ω–µ–¥–µ–ª—è';
        break;
    }
    
    filterText += `\n–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${timeFilterDisplay}`;
  }
  
  await ctx.reply(filterText, { reply_markup: mainMenu })
})

bot.hears('‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞', async (ctx: MyContext) => {
  await ctx.reply(
    '–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ Facebook Marketplace –ø–æ —Ç–≤–æ–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∏—Ö —Å—é–¥–∞.\n\n1. –ù–∞—Å—Ç—Ä–æ–π —Ñ–∏–ª—å—Ç—Ä—ã\n2. –ó–∞–ø—É—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n3. –ü–æ–ª—É—á–∞–π –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!\n\nbot by @DerxKiwi',
    { reply_markup: mainMenu }
  )
})

bot.catch((err: any) => console.error('–û—à–∏–±–∫–∞:', err))
bot.start()

function saveAllCacheToDB() {
  try {
    console.log(`[–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${ALL_KNOWN_URLS.size} URL –∏–∑ –∫—ç—à–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
    let savedCount = 0;
    const timestamp = Date.now();
    
    const insertStmt = db.prepare('INSERT OR IGNORE INTO sent_items (itemUrl, timestamp) VALUES (?, ?)');
    
    const transaction = db.transaction(() => {
      ALL_KNOWN_URLS.forEach(url => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ URL, –∞ –Ω–µ contentKey (contentKey –æ–±—ã—á–Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç http)
        if (url.startsWith('http')) {
          const result = insertStmt.run(url, timestamp);
          if (result.changes > 0) savedCount++;
        }
      });
    });
    
    transaction();
    
    console.log(`[–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount} –Ω–æ–≤—ã—Ö URL –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
  } catch (error) {
    console.error('[–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—ç—à–∞ –≤ –ë–î:', error);
  }
}

process.on('SIGINT', () => {
  console.log('[–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
  saveAllCacheToDB();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('[–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
  saveAllCacheToDB();
  process.exit(0);
});